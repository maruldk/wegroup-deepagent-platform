
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/wegroup-deepagent-platform/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          UserRole  @default(USER)
  tenantId      String?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts         Account[]
  sessions         Session[]
  tenant           Tenant?         @relation(fields: [tenantId], references: [id])
  contactHistories ContactHistory[]
  assignedLeads    Lead[]
  auditLogs        AuditLog[]
  
  // weANALYTICS relations
  dashboards       Dashboard[]
  reports          Report[]
  
  // weFINANCE relations
  invoices         Invoice[]
  transactions     Transaction[]
  budgets          Budget[]
  datevExports     DatevExport[]
  expenses         Expense[]
  expenseApprovals ExpenseApproval[]
  approvedExpenses Expense[]        @relation("ExpenseApprovals")
  financialReports FinancialReport[]
  
  // SPRINT 2.5 - Advanced Financial Analytics relations
  financialInsights          FinancialInsight[]       @relation("FinancialInsightUser")
  anomalyInvestigations      FinancialAnomalyDetection[] @relation("AnomalyInvestigations")
  alertRulesCreated          FinancialAlertRule[]     @relation("AlertRuleCreator")
  alertsResolved             FinancialAlert[]         @relation("AlertResolver")
  financialQueries           FinancialQueryHistory[]  @relation("FinancialQueryUser")
  
  // wePROJECT relations
  managedProjects  Project[]
  assignedTasks    Task[]
  projectMemberships ProjectMember[]
  timesheets       Timesheet[]
  
  // SPRINT 2.4 - wePROJECT Core Features relations
  createdProjectTemplates ProjectTemplate[] @relation("ProjectTemplateCreator")
  taskComments       TaskComment[]
  projectFileUploads ProjectFile[]        @relation("ProjectFileUploads")
  projectActivities  ProjectActivity[]
  projectResourceAllocations ProjectResourceAllocation[] @relation("ProjectResourceAllocations")
  ownedProjectRisks  ProjectRisk[]        @relation("ProjectRiskOwner")
  taskTimeLogs       TaskTimeLog[]        @relation("TaskTimeLogs")
  
  // SPRINT 2.6 - Project Analytics & Reporting relations
  projectAnalyticsReports ProjectAnalyticsReport[]  @relation("ProjectAnalyticsReports")
  teamPerformanceReviews  TeamPerformanceReview[]   @relation("TeamPerformanceReviews")
  teamPerformanceReviewsAsReviewer TeamPerformanceReview[] @relation("TeamPerformanceReviewers")
  teamPerformanceMetrics  TeamPerformanceMetrics[]
  resourceOptimizations   ResourceOptimization[]    @relation("ResourceOptimizations")
  resourceUtilizations    ResourceUtilization[]
  projectPredictions      ProjectPrediction[]       @relation("ProjectPredictions")
  projectInsightQueries   ProjectInsightQuery[]     @relation("ProjectInsightQueries")
  
  // KI-ORCHESTRATOR relations
  aiDecisions      AIDecision[]
  aiInsights       AIInsight[]
  aiAuditTrails    AIAuditTrail[]
  aiFeedback       AIFeedback[]
  aiWorkflowExecutions AIWorkflowExecution[]
  
  // EVENT-DRIVEN ORCHESTRATION relations
  realTimeNotifications RealTimeNotification[]
  
  // ML-PIPELINE relations
  mlModels              MLModel[]
  mlTrainingJobs        MLTrainingJob[]
  mlPredictions         MLPrediction[]
  mlAnomalyDetections   MLAnomalyDetection[]
  mlExperiments         MLExperiment[]
  mlDataPipelines       MLDataPipeline[]
  
  // SELF-LEARNING SYSTEM relations
  rlAgents             RLAgent[]
  userFeedback         UserFeedback[]
  userPreferences      UserPreference[]
  implicitFeedback     ImplicitFeedback[]
  hyperparameterTuning HyperparameterTuning[]
  automlExperiments    AutoMLExperiment[]
  transferLearning     TransferLearning[]

  // HYBRID SPRINT 2.1 relations
  twoFactorAuth        TwoFactorAuth?
  securityAuditLogs    SecurityAuditLog[]
  apiRateLimits        ApiRateLimit[]
  dashboardTemplates   DashboardTemplate[]
  dataImportExports    DataImportExport[]
  etlPipelines         EtlPipeline[]
  scheduledReports     ScheduledReport[]
  webhooks             Webhook[]
  dataConnectors       DataConnector[]
  customWidgets        CustomWidget[]
  
  // SPRINT 2.7 - Advanced Analytics Integration relations
  unifiedAnalyticsDashboards UnifiedAnalyticsDashboard[]
  crossModuleMetrics         CrossModuleMetric[]
  unifiedReports             UnifiedReport[]
  unifiedReportExecutions    UnifiedReportExecution[]
  aiOrchestrationSessions    AIOrchestrationSession[]
  
  // SPRINT 2.8 - KI-AUTONOMIE relations
  clientMLModels       ClientMLModel[]
  clientMLPredictions  ClientMLPrediction[]
  nlpQueries           NLPQuery[]
  voiceCommands        VoiceCommand[]
  
  // SPRINT 2.9 - BEST-IN-CLASS relations
  mfaDevices           MFADevice[]
  securityLogs         SecurityLog[]
  pwaInstallations     PWAInstallation[]
  pushNotifications    PushNotification[]
  graphqlQueries       GraphQLQuery[]
  
  // SPRINT 3.0 - CRM & HR relations
  ownedContacts        Contact[]          @relation("ContactOwner")
  ownedOpportunities   Opportunity[]      @relation("OpportunityOwner")
  ownedDeals           Deal[]             @relation("DealOwner")
  assignedCrmActivities CrmActivity[]     @relation("CrmActivityAssigned")
  createdCrmActivities CrmActivity[]      @relation("CrmActivityCreated")
  employeeProfile      Employee?          @relation("EmployeeUser")

  // MULTI-TENANT SYSTEM relations
  userTenants          UserTenant[]        // Many-to-Many relationship with tenants
  userPermissions      UserPermission[]    // User-specific permissions
  createdTenants       Tenant[]           @relation("TenantCreator")
  sentTenantInvitations TenantInvitation[] @relation("TenantInvitations")

  // SPRINT 3.2 - CREATE Module relations
  createdContentTemplates ContentTemplate[] @relation("ContentTemplateCreator")
  createdContentProjects  ContentProject[]  @relation("ContentProjectCreator")
  assignedContentProjects ContentProject[]  @relation("AssignedContentProjects")
  contentVersions         ContentVersion[]  @relation("ContentVersionCreator")

  // SPRINT 3.2 - SELL Module relations
  assignedOpportunities   SalesOpportunity[] @relation("SalesOpportunityAssignee")
  createdQuotes          SalesQuote[]       @relation("SalesQuoteCreator")
  createdSalesActivities SalesActivity[]    @relation("SalesActivityCreator")
  assignedSalesActivities SalesActivity[]   @relation("AssignedSalesActivities")
  salesTargets           SalesTarget[]      @relation("SalesTargetUser")

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Tenant {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  businessType String? // Manufacturing, Services, Technology, etc.
  logo        String?  // Logo URL
  primaryColor String? // Brand color
  website     String?
  isActive    Boolean  @default(true)
  createdById String?  // Who created this tenant
  parentTenantId String? // For tenant hierarchies (weGROUP structure)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  createdBy    User?     @relation("TenantCreator", fields: [createdById], references: [id])
  parentTenant Tenant?   @relation("TenantHierarchy", fields: [parentTenantId], references: [id])
  childTenants Tenant[]  @relation("TenantHierarchy")
  
  users        User[]    // Legacy single-tenant relation
  userTenants  UserTenant[] // New Many-to-Many relation
  customers Customer[]
  leads     Lead[]
  auditLogs AuditLog[]
  
  // weANALYTICS relations
  dashboards    Dashboard[]
  widgets       Widget[]
  reports       Report[]
  metrics       Metric[]
  
  // weFINANCE relations
  invoices         Invoice[]
  invoiceItems     InvoiceItem[]
  transactions     Transaction[]
  budgets          Budget[]
  taxCategories    TaxCategory[]
  datevExports     DatevExport[]
  expenses         Expense[]
  expenseCategories ExpenseCategory[]
  expenseApprovals ExpenseApproval[]
  budgetCategories BudgetCategory[]
  budgetAllocations BudgetAllocation[]
  financialReports FinancialReport[]
  financialKPIs    FinancialKPI[]
  cashFlowPredictions CashFlowPrediction[]
  
  // SPRINT 2.5 - Advanced Financial Analytics relations
  financialForecasts         FinancialForecast[]
  financialScenarios         FinancialScenario[]
  financialRiskAssessments   FinancialRiskAssessment[]
  financialInsights          FinancialInsight[]
  financialAnomalyDetections FinancialAnomalyDetection[]
  financialAlertRules        FinancialAlertRule[]
  financialAlerts            FinancialAlert[]
  financialBenchmarks        FinancialBenchmark[]
  financialQueryHistory      FinancialQueryHistory[]
  
  // wePROJECT relations
  projects      Project[]
  tasks         Task[]
  milestones    Milestone[]
  projectMembers ProjectMember[]
  timesheets    Timesheet[]
  
  // SPRINT 2.4 - wePROJECT Core Features relations
  projectTemplates       ProjectTemplate[]
  taskComments          TaskComment[]
  taskDependencies      TaskDependency[]
  projectFiles          ProjectFile[]
  projectActivities     ProjectActivity[]
  projectResourceAllocations ProjectResourceAllocation[]
  projectRisks          ProjectRisk[]
  taskTimeLogs          TaskTimeLog[]
  
  // SPRINT 2.6 - Project Analytics & Reporting relations
  projectMetrics         ProjectMetrics[]
  projectHealthScores    ProjectHealthScore[]
  teamPerformanceMetrics TeamPerformanceMetrics[]
  resourceUtilizations   ResourceUtilization[]
  projectPredictions     ProjectPrediction[]
  projectInsights        ProjectInsight[]
  projectAnalyticsReports ProjectAnalyticsReport[]
  teamPerformanceReviews TeamPerformanceReview[]
  resourceOptimizations  ResourceOptimization[]
  teamCollaborationScores TeamCollaborationScore[]
  projectInsightQueries  ProjectInsightQuery[]
  taskPerformanceMetrics TaskPerformanceMetrics[]
  
  // KI-ORCHESTRATOR relations
  aiDecisions   AIDecision[]
  aiInsights    AIInsight[]
  aiAuditTrails AIAuditTrail[]
  aiPredictions AIPrediction[]
  aiFeedback    AIFeedback[]
  aiModelMetrics AIModelMetrics[]
  aiWorkflowExecutions AIWorkflowExecution[]
  
  // EVENT-DRIVEN ORCHESTRATION relations
  eventBus              EventBus[]
  eventHandlers         EventHandler[]
  eventCorrelations     EventCorrelation[]
  eventSubscriptions    EventSubscription[]
  workflowDefinitions   WorkflowDefinition[]
  workflowExecutions    WorkflowExecution[]
  workflowSteps         WorkflowStep[]
  realTimeNotifications RealTimeNotification[]
  aiOrchestrationMetrics AIOrchestrationMetrics[]
  
  // ML-PIPELINE relations
  mlModels              MLModel[]
  mlTrainingJobs        MLTrainingJob[]
  mlPredictions         MLPrediction[]
  mlAnomalyDetections   MLAnomalyDetection[]
  mlFeatures            MLFeature[]
  mlExperiments         MLExperiment[]
  mlDataPipelines       MLDataPipeline[]
  mlPipelineExecutions  MLPipelineExecution[]
  mlModelMetrics        MLModelMetrics[]
  
  // SELF-LEARNING SYSTEM relations
  rlAgents              RLAgent[]
  rlEpisodes            RLEpisode[]
  rlActions             RLAction[]
  rlStates              RLState[]
  rlRewards             RLReward[]
  userFeedback          UserFeedback[]
  userPreferences       UserPreference[]
  implicitFeedback      ImplicitFeedback[]
  hyperparameterTuning  HyperparameterTuning[]
  modelPerformance      ModelPerformance[]
  conceptDrift          ConceptDrift[]
  automlExperiments     AutoMLExperiment[]
  onlineLearningSessions OnlineLearningSession[]
  transferLearning      TransferLearning[]
  adaptiveLearning      AdaptiveLearning[]

  // HYBRID SPRINT 2.1 relations
  oauthProviders        OAuthProvider[]
  securityAuditLogs     SecurityAuditLog[]
  apiRateLimits         ApiRateLimit[]
  performanceMetrics    PerformanceMetric[]
  dashboardTemplates    DashboardTemplate[]
  dataImportExports     DataImportExport[]
  etlPipelines          EtlPipeline[]
  etlExecutions         EtlExecution[]
  scheduledReports      ScheduledReport[]
  reportExecutions      ReportExecution[]
  webhooks              Webhook[]
  webhookDeliveries     WebhookDelivery[]
  dataConnectors        DataConnector[]
  connectorSyncs        ConnectorSync[]
  customWidgets         CustomWidget[]
  
  // SPRINT 2.7 - Advanced Analytics Integration relations
  unifiedAnalyticsDashboards UnifiedAnalyticsDashboard[]
  crossModuleMetrics         CrossModuleMetric[]
  unifiedReports             UnifiedReport[]
  unifiedReportExecutions    UnifiedReportExecution[]
  aiOrchestrationSessions    AIOrchestrationSession[]
  orchestrationTasks         OrchestrationTask[]
  
  // SPRINT 2.8 - KI-AUTONOMIE relations
  aiAgents               AIAgent[]
  aiAgentTasks           AIAgentTask[]
  aiAgentCommunications  AIAgentCommunication[]
  autonomousDecisions    AutonomousDecision[]
  clientMLModels         ClientMLModel[]
  clientMLPredictions    ClientMLPrediction[]
  nlpProcessors          NLPProcessor[]
  nlpQueries             NLPQuery[]
  systemHealth           SystemHealth[]
  systemIncidents        SystemIncident[]
  voiceCommands          VoiceCommand[]
  
  // SPRINT 2.9 - BEST-IN-CLASS relations
  mfaDevices             MFADevice[]
  securityLogs           SecurityLog[]
  zeroTrustPolicies      ZeroTrustPolicy[]
  cacheEntries           CacheEntry[]
  queryOptimizations     QueryOptimization[]
  pwaInstallations       PWAInstallation[]
  pushNotifications      PushNotification[]
  graphqlSchemas         GraphQLSchema[]
  graphqlQueries         GraphQLQuery[]
  tenantConfigurations   TenantConfiguration[]
  backupJobs             BackupJob[]
  
  // SPRINT 3.0 - CRM & HR relations
  contacts               Contact[]
  opportunities          Opportunity[]
  deals                  Deal[]
  crmActivities          CrmActivity[]
  employees              Employee[]
  departments            Department[]
  positions              Position[]
  performanceReviews     Performance[]
  leaveRequests          Leave[]
  payrollRecords         Payroll[]

  // MULTI-TENANT SYSTEM relations
  tenantSettings         TenantSetting[]
  tenantInvitations      TenantInvitation[]

  // SPRINT 3.2 - CREATE Module relations
  contentTemplates       ContentTemplate[]
  contentProjects        ContentProject[]
  contentAssets          ContentAsset[]
  contentVersions        ContentVersion[]

  // SPRINT 3.2 - SELL Module relations
  salesOpportunities     SalesOpportunity[]
  salesQuotes            SalesQuote[]
  salesQuoteItems        SalesQuoteItem[]
  products               Product[]
  salesOpportunityProducts SalesOpportunityProduct[]
  salesActivities        SalesActivity[]
  salesTargets           SalesTarget[]

  @@map("tenants")
}

model Customer {
  id            String   @id @default(cuid())
  companyName   String
  contactPerson String?
  email         String?
  phone         String?
  address       String?
  city          String?
  postalCode    String?
  country       String?
  status        CustomerStatus @default(ACTIVE)
  notes         String?
  tenantId      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  tenant           Tenant           @relation(fields: [tenantId], references: [id])
  contactHistories ContactHistory[]
  invoices         Invoice[]
  
  // SPRINT 3.0 - CRM relations
  contacts         Contact[]
  opportunities    Opportunity[]
  deals            Deal[]
  crmActivities    CrmActivity[]

  // SPRINT 3.2 - SELL Module relations
  salesOpportunities SalesOpportunity[]
  salesActivities    SalesActivity[]

  @@map("customers")
}

model ContactHistory {
  id          String      @id @default(cuid())
  customerId  String
  userId      String
  type        ContactType
  description String
  createdAt   DateTime    @default(now())

  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id])

  @@map("contact_histories")
}

model Lead {
  id             String     @id @default(cuid())
  companyName    String
  contactPerson  String?
  email          String?
  phone          String?
  status         LeadStatus @default(NEW)
  source         String?
  notes          String?
  estimatedValue Float?
  tenantId       String
  assignedUserId String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  tenant       Tenant @relation(fields: [tenantId], references: [id])
  assignedUser User?  @relation(fields: [assignedUserId], references: [id])

  @@map("leads")
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String
  action     String
  resource   String
  resourceId String?
  details    Json?
  tenantId   String
  createdAt  DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  tenant Tenant @relation(fields: [tenantId], references: [id])

  @@map("audit_logs")
}

// weANALYTICS Models
model Dashboard {
  id          String   @id @default(cuid())
  name        String
  description String?
  layout      Json?
  isDefault   Boolean  @default(false)
  tenantId    String
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant  Tenant   @relation(fields: [tenantId], references: [id])
  user    User     @relation(fields: [userId], references: [id])
  widgets Widget[]

  @@map("dashboards")
}

model Widget {
  id           String     @id @default(cuid())
  dashboardId  String
  name         String
  type         WidgetType
  config       Json?
  position     Json?
  size         Json?
  dataSource   String?
  tenantId     String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  dashboard Dashboard @relation(fields: [dashboardId], references: [id], onDelete: Cascade)
  tenant    Tenant    @relation(fields: [tenantId], references: [id])

  @@map("widgets")
}

model Report {
  id          String     @id @default(cuid())
  name        String
  description String?
  type        ReportType
  config      Json?
  data        Json?
  tenantId    String
  userId      String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  tenant          Tenant            @relation(fields: [tenantId], references: [id])
  user            User              @relation(fields: [userId], references: [id])
  scheduledReports ScheduledReport[]

  @@map("reports")
}

model Metric {
  id          String   @id @default(cuid())
  name        String
  description String?
  formula     String
  target      Float?
  currentValue Float?
  tenantId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant Tenant @relation(fields: [tenantId], references: [id])

  @@map("metrics")
}

// weFINANCE Models
model Invoice {
  id             String        @id @default(cuid())
  invoiceNumber  String        @unique
  customerId     String?
  customerName   String
  customerEmail  String?
  customerAddress String?
  status         InvoiceStatus @default(DRAFT)
  issueDate      DateTime
  dueDate        DateTime
  subtotal       Float         @default(0)
  taxAmount      Float         @default(0)
  totalAmount    Float         @default(0)
  notes          String?
  terms          String?
  tenantId       String
  userId         String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  customer Customer?     @relation(fields: [customerId], references: [id])
  tenant   Tenant        @relation(fields: [tenantId], references: [id])
  user     User          @relation(fields: [userId], references: [id])
  items    InvoiceItem[]
  transactions Transaction[]

  @@map("invoices")
}

model InvoiceItem {
  id          String  @id @default(cuid())
  invoiceId   String
  description String
  quantity    Float   @default(1)
  unitPrice   Float
  taxRate     Float   @default(0)
  totalPrice  Float
  tenantId    String

  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  tenant  Tenant  @relation(fields: [tenantId], references: [id])

  @@map("invoice_items")
}

model Transaction {
  id          String          @id @default(cuid())
  description String
  amount      Float
  type        TransactionType
  category    String?
  date        DateTime
  reference   String?
  invoiceId   String?
  tenantId    String
  userId      String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  invoice Invoice? @relation(fields: [invoiceId], references: [id])
  tenant  Tenant   @relation(fields: [tenantId], references: [id])
  user    User     @relation(fields: [userId], references: [id])

  @@map("transactions")
}

model Budget {
  id          String   @id @default(cuid())
  name        String
  description String?
  category    String
  budgetAmount Float
  spentAmount Float    @default(0)
  startDate   DateTime
  endDate     DateTime
  tenantId    String
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant      Tenant             @relation(fields: [tenantId], references: [id])
  user        User               @relation(fields: [userId], references: [id])
  expenses    Expense[]
  allocations BudgetAllocation[]

  @@map("budgets")
}

model TaxCategory {
  id       String @id @default(cuid())
  name     String
  rate     Float
  tenantId String

  tenant Tenant @relation(fields: [tenantId], references: [id])

  @@unique([name, tenantId])
  @@map("tax_categories")
}

model DatevExport {
  id        String   @id @default(cuid())
  filename  String
  startDate DateTime
  endDate   DateTime
  data      Json?
  tenantId  String
  userId    String
  createdAt DateTime @default(now())

  tenant Tenant @relation(fields: [tenantId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@map("datev_exports")
}

// SPRINT 2.3 - weFINANCE Core Features Extensions

model ExpenseCategory {
  id          String   @id @default(cuid())
  name        String
  description String?
  color       String?  // Hex color for UI
  icon        String?  // Icon name
  isActive    Boolean  @default(true)
  tenantId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant   Tenant    @relation(fields: [tenantId], references: [id])
  expenses Expense[]

  @@unique([name, tenantId])
  @@map("expense_categories")
}

model Expense {
  id               String        @id @default(cuid())
  title            String
  description      String?
  amount           Float
  date             DateTime
  categoryId       String?
  currency         String        @default("EUR")
  status           ExpenseStatus @default(PENDING)
  receiptUrl       String?
  receiptFilename  String?
  merchantName     String?
  notes            String?
  budgetId         String?
  projectId        String?
  isRecurring      Boolean       @default(false)
  recurringType    RecurringType?
  recurringEndDate DateTime?
  parentExpenseId  String?       // For recurring expenses
  tenantId         String
  userId           String        // Who created the expense
  approvedById     String?       // Who approved it
  approvedAt       DateTime?
  rejectedReason   String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  category        ExpenseCategory? @relation(fields: [categoryId], references: [id])
  budget          Budget?          @relation(fields: [budgetId], references: [id])
  project         Project?         @relation(fields: [projectId], references: [id])
  tenant          Tenant           @relation(fields: [tenantId], references: [id])
  user            User             @relation(fields: [userId], references: [id])
  approvedBy      User?            @relation("ExpenseApprovals", fields: [approvedById], references: [id])
  parentExpense   Expense?         @relation("RecurringExpenses", fields: [parentExpenseId], references: [id])
  childExpenses   Expense[]        @relation("RecurringExpenses")
  approvalHistory ExpenseApproval[]

  @@index([tenantId, status])
  @@index([userId, date])
  @@index([categoryId, date])
  @@map("expenses")
}

model ExpenseApproval {
  id         String        @id @default(cuid())
  expenseId  String
  status     ExpenseStatus
  comment    String?
  userId     String
  tenantId   String
  createdAt  DateTime      @default(now())

  expense Expense @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id])
  tenant  Tenant  @relation(fields: [tenantId], references: [id])

  @@map("expense_approvals")
}

model BudgetCategory {
  id          String   @id @default(cuid())
  name        String
  description String?
  color       String?
  parentId    String?  // For hierarchical categories
  tenantId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant         Tenant          @relation(fields: [tenantId], references: [id])
  parent         BudgetCategory? @relation("BudgetCategoryHierarchy", fields: [parentId], references: [id])
  children       BudgetCategory[] @relation("BudgetCategoryHierarchy")
  budgetAllocations BudgetAllocation[]

  @@unique([name, tenantId])
  @@map("budget_categories")
}

model BudgetAllocation {
  id               String   @id @default(cuid())
  budgetId         String
  categoryId       String
  allocatedAmount  Float
  spentAmount      Float    @default(0)
  forecastAmount   Float?   // AI-generated forecast
  alertThreshold   Float?   // Alert when spent reaches this %
  tenantId         String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  budget   Budget         @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  category BudgetCategory @relation(fields: [categoryId], references: [id])
  tenant   Tenant         @relation(fields: [tenantId], references: [id])

  @@unique([budgetId, categoryId])
  @@map("budget_allocations")
}

model FinancialReport {
  id          String           @id @default(cuid())
  name        String
  type        FinancialReportType
  period      ReportPeriod
  startDate   DateTime
  endDate     DateTime
  data        Json             // Report data structure
  generatedBy String           // USER or AI
  templateId  String?          // If generated from template
  filters     Json?            // Applied filters
  status      ReportStatus     @default(GENERATING)
  fileUrl     String?          // Generated PDF/Excel file
  tenantId    String
  userId      String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  tenant Tenant @relation(fields: [tenantId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@index([tenantId, type])
  @@index([startDate, endDate])
  @@map("financial_reports")
}

model FinancialKPI {
  id          String       @id @default(cuid())
  name        String       // REVENUE, PROFIT_MARGIN, CASH_FLOW, etc.
  value       Float
  target      Float?
  unit        String       // EUR, PERCENT, COUNT
  period      ReportPeriod
  date        DateTime
  metadata    Json?        // Additional context data
  tenantId    String
  calculatedAt DateTime    @default(now())

  tenant Tenant @relation(fields: [tenantId], references: [id])

  @@unique([name, period, date, tenantId])
  @@index([tenantId, name, date])
  @@map("financial_kpis")
}

model CashFlowPrediction {
  id            String   @id @default(cuid())
  predictionDate DateTime
  predictedInflow  Float
  predictedOutflow Float
  netCashFlow   Float
  confidence    Float    // 0-1 confidence score
  modelVersion  String
  tenantId      String
  createdAt     DateTime @default(now())

  tenant Tenant @relation(fields: [tenantId], references: [id])

  @@index([tenantId, predictionDate])
  @@map("cash_flow_predictions")
}

// SPRINT 2.5 - Advanced Financial Analytics Extensions

model FinancialForecast {
  id              String              @id @default(cuid())
  type            FinancialForecastType
  period          ForecastPeriod
  targetDate      DateTime
  predictedValue  Float
  actualValue     Float?
  confidence      Float               // 0-1 confidence score
  accuracy        Float?              // Calculated when actualValue is available
  modelVersion    String
  features        Json                // Input features used for prediction
  metadata        Json?               // Additional forecast context
  status          ForecastStatus      @default(ACTIVE)
  tenantId        String
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  tenant          Tenant              @relation(fields: [tenantId], references: [id])
  scenarios       FinancialScenario[] @relation("ForecastScenarios")

  @@index([tenantId, type, targetDate])
  @@index([tenantId, createdAt])
  @@map("financial_forecasts")
}

model FinancialScenario {
  id              String            @id @default(cuid())
  forecastId      String
  name            String
  description     String?
  probability     Float             // 0-1 probability of scenario
  assumptions     Json              // Scenario assumptions
  predictedValue  Float
  impact          ScenarioImpact
  tenantId        String
  createdAt       DateTime          @default(now())

  forecast        FinancialForecast @relation("ForecastScenarios", fields: [forecastId], references: [id], onDelete: Cascade)
  tenant          Tenant            @relation(fields: [tenantId], references: [id])

  @@map("financial_scenarios")
}

model FinancialRiskAssessment {
  id              String            @id @default(cuid())
  type            FinancialRiskType
  category        RiskCategory
  severity        RiskSeverity
  probability     Float             // 0-1 probability of risk
  impact          Float             // Financial impact amount
  riskScore       Float             // Calculated risk score
  description     String
  indicators      Json              // Risk indicators and metrics
  mitigation      String?           // Mitigation recommendations
  status          FinancialRiskStatus @default(ACTIVE)
  reviewDate      DateTime
  tenantId        String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  tenant          Tenant            @relation(fields: [tenantId], references: [id])

  @@index([tenantId, type, severity])
  @@index([tenantId, reviewDate])
  @@map("financial_risk_assessments")
}

model FinancialInsight {
  id              String            @id @default(cuid())
  type            FinancialInsightType
  category        InsightCategory
  priority        InsightPriority
  title           String
  description     String
  insights        Json              // Detailed insights data
  recommendations Json?             // AI-generated recommendations
  confidence      Float             // 0-1 confidence in insight
  impact          InsightImpact
  actionable      Boolean           @default(true)
  isRead          Boolean           @default(false)
  isDismissed     Boolean           @default(false)
  tenantId        String
  userId          String?           // Specific user if targeted
  createdAt       DateTime          @default(now())
  expiresAt       DateTime?

  tenant          Tenant            @relation(fields: [tenantId], references: [id])
  user            User?             @relation("FinancialInsightUser", fields: [userId], references: [id])

  @@index([tenantId, type, createdAt])
  @@index([tenantId, priority, isRead])
  @@map("financial_insights")
}

model FinancialAnomalyDetection {
  id              String            @id @default(cuid())
  type            AnomalyType
  severity        AnomalySeverity
  description     String
  detectedValue   Float
  expectedValue   Float?
  threshold       Float?
  deviation       Float             // How much it deviates from normal
  entityType      String            // TRANSACTION, EXPENSE, BUDGET, etc.
  entityId        String            // ID of the related entity
  metadata        Json              // Additional anomaly context
  status          FinancialAnomalyStatus @default(DETECTED)
  investigatedBy  String?
  resolution      String?
  tenantId        String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  tenant          Tenant            @relation(fields: [tenantId], references: [id])
  investigatedByUser User?          @relation("AnomalyInvestigations", fields: [investigatedBy], references: [id])

  @@index([tenantId, type, status])
  @@index([tenantId, severity, createdAt])
  @@map("financial_anomaly_detections")
}

model FinancialAlertRule {
  id              String            @id @default(cuid())
  name            String
  description     String?
  type            AlertRuleType
  conditions      Json              // Alert conditions
  threshold       Float?
  operator        AlertOperator     // GT, LT, EQ, etc.
  isActive        Boolean           @default(true)
  frequency       AlertFrequency    @default(REAL_TIME)
  recipients      String[]          // User IDs to notify
  lastTriggered   DateTime?
  tenantId        String
  createdBy       String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  tenant          Tenant            @relation(fields: [tenantId], references: [id])
  creator         User              @relation("AlertRuleCreator", fields: [createdBy], references: [id])
  alerts          FinancialAlert[]

  @@index([tenantId, isActive])
  @@map("financial_alert_rules")
}

model FinancialAlert {
  id              String            @id @default(cuid())
  ruleId          String
  type            AlertRuleType
  severity        AlertSeverity
  title           String
  message         String
  data            Json?             // Alert payload data
  isRead          Boolean           @default(false)
  isResolved      Boolean           @default(false)
  resolvedBy      String?
  resolvedAt      DateTime?
  tenantId        String
  createdAt       DateTime          @default(now())

  rule            FinancialAlertRule @relation(fields: [ruleId], references: [id], onDelete: Cascade)
  tenant          Tenant             @relation(fields: [tenantId], references: [id])
  resolver        User?              @relation("AlertResolver", fields: [resolvedBy], references: [id])

  @@index([tenantId, isRead, createdAt])
  @@index([tenantId, severity, isResolved])
  @@map("financial_alerts")
}

model FinancialBenchmark {
  id              String            @id @default(cuid())
  name            String
  description     String?
  industry        String            // Industry sector for benchmarking
  metric          BenchmarkMetric
  value           Float
  percentile      Float?            // Industry percentile ranking
  source          String            // Data source
  period          ReportPeriod
  date            DateTime
  tenantId        String
  createdAt       DateTime          @default(now())

  tenant          Tenant            @relation(fields: [tenantId], references: [id])

  @@unique([tenantId, metric, period, date])
  @@index([industry, metric])
  @@map("financial_benchmarks")
}

model FinancialQueryHistory {
  id              String            @id @default(cuid())
  query           String            // Natural language query
  intent          String?           // Parsed intent
  response        Json              // AI response
  processingTime  Int               // Response time in ms
  isSuccessful    Boolean           @default(true)
  feedback        QueryFeedback?    // User feedback
  tenantId        String
  userId          String
  createdAt       DateTime          @default(now())

  tenant          Tenant            @relation(fields: [tenantId], references: [id])
  user            User              @relation("FinancialQueryUser", fields: [userId], references: [id])

  @@index([tenantId, userId, createdAt])
  @@map("financial_query_history")
}

// wePROJECT Models
model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  status      ProjectStatus @default(PLANNING)
  startDate   DateTime?
  endDate     DateTime?
  budget      Float?
  tenantId    String
  managerId   String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  tenant     Tenant          @relation(fields: [tenantId], references: [id])
  manager    User            @relation(fields: [managerId], references: [id])
  tasks      Task[]
  members    ProjectMember[]
  milestones Milestone[]
  timesheets Timesheet[]
  expenses   Expense[]
  
  // SPRINT 2.4 - wePROJECT Core Features relations
  projectFiles          ProjectFile[]
  projectActivities     ProjectActivity[]
  projectResourceAllocations ProjectResourceAllocation[]
  projectRisks          ProjectRisk[]
  
  // SPRINT 2.6 - Project Analytics & Reporting relations
  projectMetrics        ProjectMetrics[]
  projectHealthScores   ProjectHealthScore[]
  projectPredictions    ProjectPrediction[]
  projectInsights       ProjectInsight[]
  teamPerformanceMetrics TeamPerformanceMetrics[]
  teamCollaborationScores TeamCollaborationScore[]
  resourceUtilizations  ResourceUtilization[]
  teamPerformanceReviews TeamPerformanceReview[]

  @@map("projects")
}

model Task {
  id          String       @id @default(cuid())
  projectId   String
  name        String
  description String?
  status      TaskStatus   @default(TODO)
  priority    TaskPriority @default(MEDIUM)
  assigneeId  String?
  startDate   DateTime?
  dueDate     DateTime?
  estimatedHours Float?
  actualHours Float?
  parentTaskId String?
  tenantId    String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  project    Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignee   User?       @relation(fields: [assigneeId], references: [id])
  parentTask Task?       @relation("TaskSubtasks", fields: [parentTaskId], references: [id])
  subtasks   Task[]      @relation("TaskSubtasks")
  tenant     Tenant      @relation(fields: [tenantId], references: [id])
  timesheets Timesheet[]
  
  // SPRINT 2.4 - wePROJECT Core Features relations
  taskComments     TaskComment[]
  taskDependencies TaskDependency[] @relation("TaskDependencies")
  taskDependents   TaskDependency[] @relation("TaskDependents")
  taskTimeLogs     TaskTimeLog[]
  
  // SPRINT 2.6 - Project Analytics & Reporting relations
  taskPerformanceMetrics TaskPerformanceMetrics[]

  @@map("tasks")
}

model Milestone {
  id          String   @id @default(cuid())
  projectId   String
  name        String
  description String?
  dueDate     DateTime
  isCompleted Boolean  @default(false)
  tenantId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tenant  Tenant  @relation(fields: [tenantId], references: [id])

  @@map("milestones")
}

model ProjectMember {
  id        String   @id @default(cuid())
  projectId String
  userId    String
  role      String?
  joinedAt  DateTime @default(now())
  tenantId  String

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id])
  tenant  Tenant  @relation(fields: [tenantId], references: [id])

  @@unique([projectId, userId])
  @@map("project_members")
}

model Timesheet {
  id          String   @id @default(cuid())
  projectId   String?
  taskId      String?
  userId      String
  date        DateTime
  hours       Float
  description String?
  tenantId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  project Project? @relation(fields: [projectId], references: [id])
  task    Task?    @relation(fields: [taskId], references: [id])
  user    User     @relation(fields: [userId], references: [id])
  tenant  Tenant   @relation(fields: [tenantId], references: [id])

  @@map("timesheets")
}

// SPRINT 2.4 - wePROJECT Core Features Extensions

model ProjectTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  category    String   // SOFTWARE, MARKETING, RESEARCH, CONSULTING
  isPublic    Boolean  @default(false)
  estimatedDuration Int? // in days
  defaultBudget Float?
  config      Json     // Template configuration
  tenantId    String
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant      Tenant        @relation(fields: [tenantId], references: [id])
  creator     User          @relation("ProjectTemplateCreator", fields: [createdBy], references: [id])
  taskTemplates TaskTemplate[]

  @@map("project_templates")
}

model TaskTemplate {
  id              String   @id @default(cuid())
  projectTemplateId String
  name            String
  description     String?
  estimatedHours  Float?
  priority        TaskPriority @default(MEDIUM)
  assigneeRole    String?  // Role instead of specific user
  dependencies    String[] // Array of task template names this depends on
  orderIndex      Int      @default(0)

  projectTemplate ProjectTemplate @relation(fields: [projectTemplateId], references: [id], onDelete: Cascade)

  @@map("task_templates")
}

model TaskComment {
  id        String   @id @default(cuid())
  taskId    String
  userId    String
  content   String
  isInternal Boolean @default(false) // Internal team comment vs client-visible
  tenantId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id])
  tenant Tenant @relation(fields: [tenantId], references: [id])

  @@map("task_comments")
}

model TaskDependency {
  id              String         @id @default(cuid())
  taskId          String         // Dependent task
  dependsOnTaskId String         // Task it depends on
  dependencyType  DependencyType @default(FINISH_TO_START)
  lag             Int            @default(0) // Days lag/lead
  tenantId        String

  task          Task   @relation("TaskDependencies", fields: [taskId], references: [id], onDelete: Cascade)
  dependsOnTask Task   @relation("TaskDependents", fields: [dependsOnTaskId], references: [id], onDelete: Cascade)
  tenant        Tenant @relation(fields: [tenantId], references: [id])

  @@unique([taskId, dependsOnTaskId])
  @@map("task_dependencies")
}

model ProjectFile {
  id          String   @id @default(cuid())
  projectId   String
  name        String
  originalName String
  fileType    String   // PDF, DOC, XLS, IMG, etc.
  fileSize    Int      // in bytes
  fileUrl     String
  uploadedBy  String
  tenantId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  project    Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  uploadedByUser User @relation("ProjectFileUploads", fields: [uploadedBy], references: [id])
  tenant     Tenant  @relation(fields: [tenantId], references: [id])

  @@map("project_files")
}

model ProjectActivity {
  id           String       @id @default(cuid())
  projectId    String
  userId       String?
  activityType ActivityType
  description  String
  metadata     Json?        // Additional context data
  entityType   String?      // TASK, MILESTONE, FILE, MEMBER
  entityId     String?      // ID of the related entity
  tenantId     String
  createdAt    DateTime     @default(now())

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User?   @relation(fields: [userId], references: [id])
  tenant  Tenant  @relation(fields: [tenantId], references: [id])

  @@index([projectId, createdAt])
  @@map("project_activities")
}



model ProjectResourceAllocation {
  id           String   @id @default(cuid())
  projectId    String
  userId       String
  allocatedHours Float   // Hours per week allocated
  startDate    DateTime
  endDate      DateTime?
  role         String?
  hourlyRate   Float?   // For budget calculations
  tenantId     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation("ProjectResourceAllocations", fields: [userId], references: [id])
  tenant  Tenant  @relation(fields: [tenantId], references: [id])

  @@unique([projectId, userId, startDate])
  @@map("project_resource_allocations")
}

model ProjectRisk {
  id           String     @id @default(cuid())
  projectId    String
  title        String
  description  String
  probability  RiskLevel  // LOW, MEDIUM, HIGH
  impact       RiskLevel
  riskScore    Float      // Calculated: probability * impact
  mitigation   String?
  owner        String?    // User responsible for monitoring
  status       RiskStatus @default(IDENTIFIED)
  tenantId     String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  ownerUser User? @relation("ProjectRiskOwner", fields: [owner], references: [id])
  tenant  Tenant  @relation(fields: [tenantId], references: [id])

  @@map("project_risks")
}

model TaskTimeLog {
  id          String   @id @default(cuid())
  taskId      String
  userId      String
  startTime   DateTime
  endTime     DateTime?
  description String?
  tenantId    String
  createdAt   DateTime @default(now())

  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user   User   @relation("TaskTimeLogs", fields: [userId], references: [id])
  tenant Tenant @relation(fields: [tenantId], references: [id])

  @@map("task_time_logs")
}

enum UserRole {
  // Legacy roles (for backward compatibility)
  SUPER_ADMIN
  ADMIN
  MANAGER
  USER
  AUDITOR
  
  // Level 1: Administratoren
  GLOBAL_ADMIN       // Globaler Administrator (alle Mandanten)
  TENANT_ADMIN       // Mandanten-Administrator
  
  // Level 2: C-Level (mandantenübergreifend)
  CEO                // Chief Executive Officer
  CFO                // Chief Financial Officer
  CTO                // Chief Technology Officer
  COO                // Chief Operating Officer
  
  // Level 3: Management (Führungskräfte)
  DEPARTMENT_HEAD    // Abteilungsleiter
  TEAM_LEAD          // Teamleiter
  PROJECT_MANAGER    // Projektmanager
  HR_MANAGER         // HR Manager
  SALES_MANAGER      // Sales Manager
  CRM_MANAGER        // CRM Manager
  
  // Level 4: Operative (Mitarbeiter)
  SENIOR_EMPLOYEE    // Senior Mitarbeiter
  EMPLOYEE           // Standard Mitarbeiter
  JUNIOR_EMPLOYEE    // Junior Mitarbeiter
  INTERN             // Praktikant
  SALES_REP          // Sales Representative
  HR_SPECIALIST      // HR Specialist
  
  // Level 5: Kunden
  CUSTOMER_ADMIN     // Kunden-Administrator
  CUSTOMER_USER      // Kunden-Benutzer
  
  // Level 6: Lieferanten
  SUPPLIER_ADMIN     // Lieferanten-Administrator
  SUPPLIER_USER      // Lieferanten-Benutzer
}

enum CustomerStatus {
  ACTIVE
  INACTIVE
  PROSPECT
  CHURNED
}

enum ContactType {
  CALL
  EMAIL
  MEETING
  NOTE
  TASK
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  PROPOSAL
  NEGOTIATION
  WON
  LOST
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}

enum TransactionType {
  INCOME
  EXPENSE
  TRANSFER
}

enum ProjectStatus {
  PLANNING
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum WidgetType {
  CHART_LINE
  CHART_BAR
  CHART_PIE
  CHART_DOUGHNUT
  METRIC_CARD
  TABLE
  GAUGE
}

enum ReportType {
  ANALYTICS
  FINANCIAL
  PROJECT
  CUSTOM
}

enum ExpenseStatus {
  PENDING
  APPROVED
  REJECTED
  PAID
  CANCELLED
}

enum RecurringType {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

enum FinancialReportType {
  PROFIT_LOSS
  CASH_FLOW
  BALANCE_SHEET
  EXPENSE_ANALYSIS
  BUDGET_PERFORMANCE
  TAX_REPORT
  CUSTOM
}

enum ReportPeriod {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
  CUSTOM
}

enum ReportStatus {
  GENERATING
  COMPLETED
  FAILED
  CANCELLED
}

enum DependencyType {
  FINISH_TO_START
  START_TO_START
  FINISH_TO_FINISH
  START_TO_FINISH
}

enum ActivityType {
  PROJECT_CREATED
  PROJECT_UPDATED
  PROJECT_COMPLETED
  TASK_CREATED
  TASK_UPDATED
  TASK_ASSIGNED
  TASK_COMPLETED
  MILESTONE_CREATED
  MILESTONE_COMPLETED
  MEMBER_ADDED
  MEMBER_REMOVED
  FILE_UPLOADED
  FILE_DELETED
  COMMENT_ADDED
  RISK_IDENTIFIED
  RISK_MITIGATED
  BUDGET_UPDATED
  TIMELINE_CHANGED
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
  AI_INSIGHT
  WORKFLOW_UPDATE
  BUSINESS_ALERT
  SYSTEM_NOTIFICATION
}

enum ProjectNotificationType {
  TASK_ASSIGNED
  TASK_DUE_SOON
  TASK_OVERDUE
  TASK_COMPLETED
  PROJECT_UPDATE
  MILESTONE_DUE
  BUDGET_ALERT
  MEMBER_ADDED
  COMMENT_MENTION
  FILE_SHARED
  RISK_ALERT
  APPROVAL_NEEDED
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum RiskStatus {
  IDENTIFIED
  ASSESSING
  MITIGATING
  MONITORING
  CLOSED
}

// KI-ORCHESTRATOR Models
model AIDecision {
  id           String   @id @default(cuid())
  decisionType String   // RESOURCE_ALLOCATION, RISK_ASSESSMENT, PREDICTION, OPTIMIZATION
  context      Json     // Input data for the decision
  decision     Json     // AI's decision/recommendation
  confidence   Float    // Confidence score 0-1
  reasoning    String?  // Explainable AI reasoning
  userId       String?
  tenantId     String
  resourceType String?  // PROJECT, TASK, FINANCE, CUSTOMER
  resourceId   String?
  isAccepted   Boolean? // User acceptance of AI decision
  feedback     String?  // User feedback on decision quality
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user   User?  @relation(fields: [userId], references: [id])
  tenant Tenant @relation(fields: [tenantId], references: [id])

  @@index([tenantId, decisionType])
  @@index([resourceType, resourceId])
  @@map("ai_decisions")
}

model AIInsight {
  id           String      @id @default(cuid())
  category     String      // ANALYTICS, FINANCE, PROJECT, CUSTOMER
  type         InsightType
  title        String
  description  String
  severity     String      // LOW, MEDIUM, HIGH, CRITICAL
  data         Json        // Supporting data/metrics
  confidence   Float       // Confidence score 0-1
  isRead       Boolean     @default(false)
  isActionable Boolean     @default(false)
  actionTaken  String?
  tenantId     String
  userId       String?
  resourceType String?
  resourceId   String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  tenant Tenant @relation(fields: [tenantId], references: [id])
  user   User?  @relation(fields: [userId], references: [id])

  @@index([tenantId, category])
  @@index([isRead, severity])
  @@map("ai_insights")
}

model AIAuditTrail {
  id           String   @id @default(cuid())
  aiAction     String   // PREDICTION, OPTIMIZATION, ANALYSIS, RECOMMENDATION
  module       String   // ANALYTICS, FINANCE, PROJECT, ORCHESTRATOR
  inputData    Json     // Input data processed
  outputData   Json     // AI output/result
  confidence   Float    // Confidence score
  processingTime Int    // Processing time in milliseconds
  modelVersion String?  // AI model version used
  userId       String?
  tenantId     String
  resourceType String?
  resourceId   String?
  createdAt    DateTime @default(now())

  user   User?  @relation(fields: [userId], references: [id])
  tenant Tenant @relation(fields: [tenantId], references: [id])

  @@index([tenantId, aiAction])
  @@index([module, createdAt])
  @@map("ai_audit_trails")
}

model AIPrediction {
  id           String          @id @default(cuid())
  predictionType String        // CASHFLOW, PROJECT_COMPLETION, RISK_SCORE, DEMAND_FORECAST
  targetDate   DateTime        // Date of prediction
  predictedValue Float         // Predicted numerical value
  actualValue  Float?          // Actual value (for accuracy tracking)
  accuracy     Float?          // Accuracy score once actual is known
  confidence   Float           // Confidence in prediction
  modelData    Json            // Model parameters and input data
  status       PredictionStatus @default(ACTIVE)
  tenantId     String
  resourceType String?
  resourceId   String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  tenant Tenant @relation(fields: [tenantId], references: [id])

  @@index([tenantId, predictionType])
  @@index([targetDate, status])
  @@map("ai_predictions")
}

model AIFeedback {
  id           String      @id @default(cuid())
  feedbackType FeedbackType
  rating       Int         // 1-5 rating
  comment      String?
  aiDecisionId String?
  aiInsightId  String?
  userId       String
  tenantId     String
  createdAt    DateTime    @default(now())

  user   User   @relation(fields: [userId], references: [id])
  tenant Tenant @relation(fields: [tenantId], references: [id])

  @@index([tenantId, feedbackType])
  @@map("ai_feedback")
}

model AIModelMetrics {
  id           String   @id @default(cuid())
  modelName    String   // PREDICTIVE_ANALYTICS, RISK_ASSESSMENT, RESOURCE_OPTIMIZER
  version      String
  accuracy     Float    // Model accuracy score
  precision    Float    // Precision metric
  recall       Float    // Recall metric
  f1Score      Float    // F1 score
  trainingData Json     // Training data statistics
  lastTrained  DateTime
  tenantId     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  tenant Tenant @relation(fields: [tenantId], references: [id])

  @@unique([modelName, version, tenantId])
  @@map("ai_model_metrics")
}

model AIWorkflowExecution {
  id           String             @id @default(cuid())
  workflowName String             // FINANCE_PROCESSING, PROJECT_OPTIMIZATION, ANALYTICS_GENERATION
  status       WorkflowStatus     @default(RUNNING)
  startTime    DateTime           @default(now())
  endTime      DateTime?
  duration     Int?               // Duration in milliseconds
  inputData    Json
  outputData   Json?
  errorMessage String?
  tenantId     String
  userId       String?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt

  tenant Tenant @relation(fields: [tenantId], references: [id])
  user   User?  @relation(fields: [userId], references: [id])

  @@index([tenantId, workflowName])
  @@index([status, startTime])
  @@map("ai_workflow_executions")
}

enum InsightType {
  ANOMALY
  TREND
  PREDICTION
  OPTIMIZATION
  RISK
  OPPORTUNITY
  ALERT
}

enum PredictionStatus {
  ACTIVE
  COMPLETED
  EXPIRED
  INVALIDATED
}

enum FeedbackType {
  DECISION_QUALITY
  INSIGHT_RELEVANCE
  PREDICTION_ACCURACY
  WORKFLOW_EFFICIENCY
  GENERAL
}

enum WorkflowStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

// ==================== HYBRID SPRINT 2.1: ADVANCED SECURITY & ANALYTICS MODELS ====================

// OAuth Provider Management
model OAuthProvider {
  id           String   @id @default(cuid())
  name         String   // GOOGLE, MICROSOFT, GITHUB
  clientId     String
  clientSecret String
  scopes       String[] // Requested OAuth scopes
  isActive     Boolean  @default(true)
  tenantId     String?  // Optional: tenant-specific OAuth apps
  metadata     Json?    // Additional provider-specific config
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  tenant       Tenant?  @relation(fields: [tenantId], references: [id])
  
  @@unique([name, tenantId])
  @@map("oauth_providers")
}

// Two-Factor Authentication
model TwoFactorAuth {
  id           String   @id @default(cuid())
  userId       String   @unique
  secret       String   // Base32 encoded secret
  isEnabled    Boolean  @default(false)
  backupCodes  String[] // Recovery codes
  lastUsed     DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("two_factor_auth")
}

// Enhanced Audit Logging
model SecurityAuditLog {
  id           String   @id @default(cuid())
  userId       String?
  sessionId    String?
  action       SecurityAction
  resource     String
  resourceId   String?
  ipAddress    String?
  userAgent    String?
  location     Json?    // Geolocation data
  riskScore    Float?   // Security risk assessment (0-1)
  details      Json?
  tenantId     String?
  createdAt    DateTime @default(now())

  user         User?    @relation(fields: [userId], references: [id])
  tenant       Tenant?  @relation(fields: [tenantId], references: [id])

  @@index([tenantId, action, createdAt])
  @@index([userId, action])
  @@index([riskScore])
  @@map("security_audit_logs")
}

// API Rate Limiting
model ApiRateLimit {
  id           String   @id @default(cuid())
  userId       String?
  ipAddress    String?
  endpoint     String
  requestCount Int      @default(0)
  windowStart  DateTime @default(now())
  windowEnd    DateTime
  isBlocked    Boolean  @default(false)
  tenantId     String?

  user         User?    @relation(fields: [userId], references: [id])
  tenant       Tenant?  @relation(fields: [tenantId], references: [id])

  @@unique([userId, endpoint, windowStart])
  @@unique([ipAddress, endpoint, windowStart])
  @@map("api_rate_limits")
}

// Performance Monitoring
model PerformanceMetric {
  id           String   @id @default(cuid())
  metricType   PerformanceMetricType
  endpoint     String?
  responseTime Float    // Response time in milliseconds
  cpuUsage     Float?   // CPU usage percentage
  memoryUsage  Float?   // Memory usage in MB
  dbQueryTime  Float?   // Database query time in ms
  errorRate    Float?   // Error rate percentage
  throughput   Float?   // Requests per second
  timestamp    DateTime @default(now())
  tenantId     String?

  tenant       Tenant?  @relation(fields: [tenantId], references: [id])

  @@index([metricType, timestamp])
  @@index([tenantId, timestamp])
  @@map("performance_metrics")
}

// Advanced Dashboard Builder
model DashboardTemplate {
  id           String   @id @default(cuid())
  name         String
  description  String?
  category     String   // SALES, FINANCE, PROJECT, ANALYTICS, EXECUTIVE
  layout       Json     // Complete dashboard layout definition
  widgets      Json     // Widget configurations
  isPublic     Boolean  @default(false)
  isOfficial   Boolean  @default(false) // weGROUP official templates
  rating       Float    @default(0)
  downloads    Int      @default(0)
  tenantId     String?
  userId       String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  tenant       Tenant?  @relation(fields: [tenantId], references: [id])
  user         User?    @relation(fields: [userId], references: [id])

  @@index([category, rating])
  @@map("dashboard_templates")
}

// Data Import/Export Management
model DataImportExport {
  id           String             @id @default(cuid())
  name         String
  type         ImportExportType   // IMPORT, EXPORT
  format       DataFormat         // CSV, JSON, EXCEL, PDF
  source       String?            // Source file path or URL
  destination  String?            // Destination file path
  mapping      Json?              // Field mapping configuration
  filters      Json?              // Data filters
  status       ImportExportStatus @default(PENDING)
  recordsTotal Int?               // Total records processed
  recordsSuccess Int?             // Successfully processed records
  recordsError Int?               // Failed records
  errorLog     String?            // Error details
  schedule     Json?              // Scheduled execution config
  lastRun      DateTime?
  nextRun      DateTime?
  tenantId     String
  userId       String
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt

  tenant       Tenant             @relation(fields: [tenantId], references: [id])
  user         User               @relation(fields: [userId], references: [id])

  @@index([tenantId, type, status])
  @@map("data_import_exports")
}

// ETL Pipeline Management
model EtlPipeline {
  id           String           @id @default(cuid())
  name         String
  description  String?
  sourceConfig Json             // Source configuration (DB, API, File)
  transformConfig Json          // Data transformation rules
  targetConfig Json             // Target configuration
  schedule     Json?            // Cron-like schedule
  isActive     Boolean          @default(true)
  lastRun      DateTime?
  nextRun      DateTime?
  tenantId     String
  userId       String
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  tenant       Tenant           @relation(fields: [tenantId], references: [id])
  user         User             @relation(fields: [userId], references: [id])
  executions   EtlExecution[]

  @@index([tenantId, isActive])
  @@map("etl_pipelines")
}

model EtlExecution {
  id           String           @id @default(cuid())
  pipelineId   String
  status       ETLExecutionStatus @default(RUNNING)
  startTime    DateTime         @default(now())
  endTime      DateTime?
  duration     Int?             // Duration in milliseconds
  recordsProcessed Int?         // Number of records processed
  recordsSuccess Int?           // Successfully processed
  recordsError   Int?           // Failed records
  errorLog     String?
  metrics      Json?            // Execution metrics
  tenantId     String

  pipeline     EtlPipeline      @relation(fields: [pipelineId], references: [id], onDelete: Cascade)
  tenant       Tenant           @relation(fields: [tenantId], references: [id])

  @@index([pipelineId, status])
  @@map("etl_executions")
}

// Scheduled Reports
model ScheduledReport {
  id           String           @id @default(cuid())
  reportId     String
  name         String
  schedule     Json             // Cron expression and timezone
  recipients   String[]         // Email addresses
  format       ReportFormat     // PDF, EXCEL, CSV
  parameters   Json?            // Report parameters
  isActive     Boolean          @default(true)
  lastRun      DateTime?
  nextRun      DateTime?
  tenantId     String
  userId       String
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  report       Report           @relation(fields: [reportId], references: [id])
  tenant       Tenant           @relation(fields: [tenantId], references: [id])
  user         User             @relation(fields: [userId], references: [id])
  executions   ReportExecution[]

  @@index([tenantId, isActive, nextRun])
  @@map("scheduled_reports")
}

model ReportExecution {
  id               String           @id @default(cuid())
  scheduledReportId String
  status           ReportExecutionStatus @default(PENDING)
  startTime        DateTime         @default(now())
  endTime          DateTime?
  filePath         String?          // Generated report file path
  fileSize         Int?             // File size in bytes
  errorMessage     String?
  tenantId         String

  scheduledReport  ScheduledReport  @relation(fields: [scheduledReportId], references: [id], onDelete: Cascade)
  tenant           Tenant           @relation(fields: [tenantId], references: [id])

  @@index([scheduledReportId, status])
  @@map("report_executions")
}

// Webhook Integration
model Webhook {
  id           String           @id @default(cuid())
  name         String
  url          String
  events       WebhookEvent[]   // Events to trigger webhook
  headers      Json?            // Custom headers
  secret       String?          // Webhook secret for verification
  isActive     Boolean          @default(true)
  retryPolicy  Json?            // Retry configuration
  lastTriggered DateTime?
  tenantId     String
  userId       String
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  tenant       Tenant           @relation(fields: [tenantId], references: [id])
  user         User             @relation(fields: [userId], references: [id])
  deliveries   WebhookDelivery[]

  @@index([tenantId, isActive])
  @@map("webhooks")
}

model WebhookDelivery {
  id           String               @id @default(cuid())
  webhookId    String
  event        WebhookEvent
  payload      Json
  httpStatus   Int?
  responseBody String?
  responseTime Int?                 // Response time in milliseconds
  status       WebhookDeliveryStatus @default(PENDING)
  attempts     Int                  @default(0)
  maxAttempts  Int                  @default(3)
  nextRetry    DateTime?
  tenantId     String
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt

  webhook      Webhook              @relation(fields: [webhookId], references: [id], onDelete: Cascade)
  tenant       Tenant               @relation(fields: [tenantId], references: [id])

  @@index([webhookId, status])
  @@index([status, nextRetry])
  @@map("webhook_deliveries")
}

// Third-party Data Connectors
model DataConnector {
  id           String               @id @default(cuid())
  name         String
  type         ConnectorType        // SALESFORCE, HUBSPOT, GOOGLE_ANALYTICS, STRIPE, etc.
  config       Json                 // Connector-specific configuration
  credentials  Json                 // Encrypted credentials
  isActive     Boolean              @default(true)
  lastSync     DateTime?
  syncInterval Int?                 // Sync interval in minutes
  tenantId     String
  userId       String
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt

  tenant       Tenant               @relation(fields: [tenantId], references: [id])
  user         User                 @relation(fields: [userId], references: [id])
  syncs        ConnectorSync[]

  @@index([tenantId, type, isActive])
  @@map("data_connectors")
}

model ConnectorSync {
  id           String               @id @default(cuid())
  connectorId  String
  status       ConnectorSyncStatus  @default(RUNNING)
  startTime    DateTime             @default(now())
  endTime      DateTime?
  recordsSync  Int?
  errorMessage String?
  tenantId     String

  connector    DataConnector        @relation(fields: [connectorId], references: [id], onDelete: Cascade)
  tenant       Tenant               @relation(fields: [tenantId], references: [id])

  @@index([connectorId, status])
  @@map("connector_syncs")
}

// Advanced Widget Types for Analytics
model CustomWidget {
  id           String           @id @default(cuid())
  name         String
  description  String?
  category     String           // CHART, METRIC, TABLE, MAP, CUSTOM
  component    String           // React component name
  config       Json             // Widget configuration schema
  dataSource   Json             // Data source configuration
  isPublic     Boolean          @default(false)
  rating       Float            @default(0)
  downloads    Int              @default(0)
  tenantId     String?
  userId       String?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  tenant       Tenant?          @relation(fields: [tenantId], references: [id])
  user         User?            @relation(fields: [userId], references: [id])

  @@index([category, rating])
  @@map("custom_widgets")
}

// ==================== ENUMS FOR NEW FEATURES ====================

enum SecurityAction {
  LOGIN_SUCCESS
  LOGIN_FAILED
  LOGOUT
  PASSWORD_CHANGE
  PASSWORD_RESET
  TWO_FACTOR_ENABLE
  TWO_FACTOR_DISABLE
  TWO_FACTOR_SUCCESS
  TWO_FACTOR_FAILED
  OAUTH_LOGIN
  OAUTH_FAILED
  PERMISSION_DENIED
  DATA_EXPORT
  DATA_IMPORT
  ADMIN_ACTION
  SUSPICIOUS_ACTIVITY
}

enum PerformanceMetricType {
  API_RESPONSE_TIME
  DATABASE_QUERY_TIME
  CPU_USAGE
  MEMORY_USAGE
  DISK_USAGE
  NETWORK_LATENCY
  ERROR_RATE
  THROUGHPUT
  CONCURRENT_USERS
}

enum ImportExportType {
  IMPORT
  EXPORT
}

enum DataFormat {
  CSV
  JSON
  EXCEL
  PDF
  XML
  PARQUET
}

enum ImportExportStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum ETLExecutionStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum ReportFormat {
  PDF
  EXCEL
  CSV
  JSON
}

enum ReportExecutionStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
}

enum WebhookEvent {
  USER_CREATED
  USER_UPDATED
  USER_DELETED
  PROJECT_CREATED
  PROJECT_UPDATED
  PROJECT_COMPLETED
  TASK_CREATED
  TASK_UPDATED
  TASK_COMPLETED
  INVOICE_CREATED
  INVOICE_PAID
  PAYMENT_RECEIVED
  REPORT_GENERATED
  ANOMALY_DETECTED
  THRESHOLD_EXCEEDED
}

enum WebhookDeliveryStatus {
  PENDING
  SUCCESS
  FAILED
  RETRYING
}

enum ConnectorType {
  SALESFORCE
  HUBSPOT
  GOOGLE_ANALYTICS
  GOOGLE_SHEETS
  STRIPE
  SHOPIFY
  MAILCHIMP
  SLACK
  MICROSOFT_365
  DROPBOX
  AMAZON_S3
  POSTGRESQL
  MYSQL
  MONGODB
  REST_API
  GRAPHQL_API
}

enum ConnectorSyncStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
}

// ==================== SPRINT 2.5 - ADVANCED FINANCIAL ANALYTICS ENUMS ====================

enum FinancialForecastType {
  REVENUE
  EXPENSE
  CASH_FLOW
  PROFIT
  BUDGET_UTILIZATION
  SEASONAL_PATTERN
  GROWTH_RATE
  MARKET_SHARE
}

enum ForecastPeriod {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

enum ForecastStatus {
  ACTIVE
  EXPIRED
  CANCELLED
  SUPERSEDED
}

enum ScenarioImpact {
  POSITIVE
  NEGATIVE
  NEUTRAL
  MIXED
}

enum FinancialRiskType {
  CREDIT_RISK
  MARKET_RISK
  LIQUIDITY_RISK
  OPERATIONAL_RISK
  COMPLIANCE_RISK
  CURRENCY_RISK
  INTEREST_RATE_RISK
  INFLATION_RISK
}

enum RiskCategory {
  FINANCIAL
  OPERATIONAL
  STRATEGIC
  COMPLIANCE
  TECHNOLOGY
  ENVIRONMENTAL
}

enum RiskSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum FinancialRiskStatus {
  ACTIVE
  MITIGATED
  ACCEPTED
  TRANSFERRED
  AVOIDED
}

enum FinancialInsightType {
  TREND_ANALYSIS
  ANOMALY_DETECTION
  PERFORMANCE_COMPARISON
  FORECASTING
  RECOMMENDATION
  ALERT
  BENCHMARK
}

enum InsightCategory {
  REVENUE
  EXPENSES
  PROFITABILITY
  CASH_FLOW
  BUDGET
  RISK
  OPPORTUNITIES
  EFFICIENCY
}

enum InsightPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
  URGENT
}

enum InsightImpact {
  POSITIVE
  NEGATIVE
  NEUTRAL
  ACTIONABLE
}

enum AnomalyType {
  TRANSACTION_AMOUNT
  TRANSACTION_FREQUENCY
  EXPENSE_PATTERN
  REVENUE_DROP
  BUDGET_VARIANCE
  CASH_FLOW_ANOMALY
  SEASONAL_DEVIATION
}

enum FinancialAnomalyStatus {
  DETECTED
  INVESTIGATING
  RESOLVED
  FALSE_POSITIVE
  IGNORED
}

enum AlertRuleType {
  BUDGET_THRESHOLD
  EXPENSE_LIMIT
  REVENUE_TARGET
  CASH_FLOW_WARNING
  ANOMALY_DETECTION
  COMPLIANCE_CHECK
  PERFORMANCE_METRIC
}

enum AlertOperator {
  GREATER_THAN
  LESS_THAN
  EQUAL_TO
  NOT_EQUAL_TO
  GREATER_THAN_OR_EQUAL
  LESS_THAN_OR_EQUAL
  BETWEEN
  NOT_BETWEEN
}

enum AlertFrequency {
  REAL_TIME
  HOURLY
  DAILY
  WEEKLY
  MONTHLY
}

enum AlertSeverity {
  INFO
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum BenchmarkMetric {
  REVENUE_GROWTH
  PROFIT_MARGIN
  ROI
  CASH_CONVERSION_CYCLE
  DEBT_TO_EQUITY
  CURRENT_RATIO
  EXPENSE_RATIO
  EFFICIENCY_RATIO
}

enum QueryFeedback {
  HELPFUL
  NOT_HELPFUL
  PARTIALLY_HELPFUL
  INCORRECT
  NEEDS_IMPROVEMENT
}

// ==================== ML-PIPELINE & PREDICTIVE ANALYTICS MODELS ====================

model MLModel {
  id              String          @id @default(cuid())
  name            String          // Model name (e.g., "Sales Forecasting", "Anomaly Detection")
  version         String          @default("1.0")
  type            MLModelType     // REGRESSION, CLASSIFICATION, CLUSTERING, TIME_SERIES, NEURAL_NETWORK
  framework       String          // TENSORFLOW_JS, SCIKIT_LEARN, CUSTOM
  algorithm       String          // LINEAR_REGRESSION, RANDOM_FOREST, LSTM, etc.
  description     String?
  configParams    Json            // Model hyperparameters and configuration
  architecture    Json?           // Model architecture (for neural networks)
  featureColumns  String[]        // Input feature column names
  targetColumn    String?         // Target column name (for supervised learning)
  status          MLModelStatus   @default(TRAINING)
  accuracy        Float?          // Model accuracy (0-1)
  precision       Float?          // Precision metric
  recall          Float?          // Recall metric
  f1Score         Float?          // F1 score
  mse             Float?          // Mean Squared Error (for regression)
  mae             Float?          // Mean Absolute Error
  r2Score         Float?          // R-squared score
  trainingDataSize Int?           // Number of training samples
  validationDataSize Int?         // Number of validation samples
  modelPath       String?         // Path to saved model file
  modelData       Json?           // Serialized model data (for small models)
  lastTrainingDate DateTime?      // When model was last trained
  lastUsedDate    DateTime?       // When model was last used for prediction
  usageCount      Int             @default(0)
  isActive        Boolean         @default(true)
  isProduction    Boolean         @default(false)
  tenantId        String
  userId          String?         // User who created/trained the model
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  tenant          Tenant          @relation(fields: [tenantId], references: [id])
  user            User?           @relation(fields: [userId], references: [id])
  trainingJobs    MLTrainingJob[]
  predictions     MLPrediction[]
  experiments     MLExperiment[]
  features        MLFeature[]
  metrics         MLModelMetrics[]
  
  // SELF-LEARNING SYSTEM relations
  hyperparameterTuning  HyperparameterTuning[]
  modelPerformance      ModelPerformance[]
  conceptDrift          ConceptDrift[]
  onlineLearningSessions OnlineLearningSession[]
  sourceTransfers       TransferLearning[] @relation("SourceModel")
  targetTransfers       TransferLearning[] @relation("TargetModel")
  adaptiveLearning      AdaptiveLearning[]

  @@unique([name, version, tenantId])
  @@index([tenantId, type, status])
  @@index([isActive, isProduction])
  @@map("ml_models")
}

model MLTrainingJob {
  id              String              @id @default(cuid())
  modelId         String
  jobName         String
  status          MLTrainingStatus    @default(QUEUED)
  startTime       DateTime?
  endTime         DateTime?
  duration        Int?                // Training duration in milliseconds
  trainingConfig  Json                // Training hyperparameters
  datasetPath     String?             // Path to training dataset
  datasetSize     Int?                // Number of training samples
  validationSplit Float?              // Validation split ratio
  epochs          Int?                // Number of training epochs
  batchSize       Int?                // Training batch size
  learningRate    Float?              // Learning rate
  lossFunctionData Json?              // Loss function progression
  accuracyData    Json?               // Accuracy progression
  validationLoss  Float?              // Final validation loss
  validationAccuracy Float?           // Final validation accuracy
  modelCheckpoints Json?              // Model checkpoints during training
  logs            String?             // Training logs
  errorMessage    String?             // Error message if failed
  tenantId        String
  userId          String?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  model           MLModel             @relation(fields: [modelId], references: [id], onDelete: Cascade)
  tenant          Tenant              @relation(fields: [tenantId], references: [id])
  user            User?               @relation(fields: [userId], references: [id])

  @@index([modelId, status])
  @@index([tenantId, status, startTime])
  @@map("ml_training_jobs")
}

model MLPrediction {
  id              String              @id @default(cuid())
  modelId         String
  predictionType  MLPredictionType    // SALES_FORECAST, CASH_FLOW, PROJECT_TIMELINE, ANOMALY, CUSTOMER_BEHAVIOR
  inputData       Json                // Input features for prediction
  outputData      Json                // Prediction results
  confidence      Float?              // Prediction confidence (0-1)
  probability     Json?               // Probability distribution (for classification)
  predictionDate  DateTime            @default(now())
  targetDate      DateTime?           // Date being predicted for
  actualValue     Json?               // Actual value (for accuracy tracking)
  accuracy        Float?              // Prediction accuracy once actual is known
  isCorrect       Boolean?            // Whether prediction was correct
  resourceType    String?             // CUSTOMER, PROJECT, INVOICE, TRANSACTION
  resourceId      String?             // ID of related resource
  context         Json?               // Additional context data
  batchId         String?             // Batch prediction ID
  tenantId        String
  userId          String?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  model           MLModel             @relation(fields: [modelId], references: [id])
  tenant          Tenant              @relation(fields: [tenantId], references: [id])
  user            User?               @relation(fields: [userId], references: [id])

  @@index([modelId, predictionType])
  @@index([tenantId, predictionDate])
  @@index([resourceType, resourceId])
  @@index([targetDate, isCorrect])
  @@map("ml_predictions")
}

model MLAnomalyDetection {
  id              String              @id @default(cuid())
  anomalyType     MLAnomalyType       // FINANCIAL, PROJECT, CUSTOMER_BEHAVIOR, PERFORMANCE, DATA_QUALITY
  dataSource      String              // Source of the data being analyzed
  inputData       Json                // Data that was analyzed
  anomalyScore    Float               // Anomaly score (0-1, higher = more anomalous)
  threshold       Float               // Threshold used for detection
  isAnomaly       Boolean             // Whether this is considered an anomaly
  severity        AnomalySeverity     @default(MEDIUM)
  description     String              // Human-readable description of the anomaly
  explanation     String?             // Detailed explanation of why it's anomalous
  recommendations Json?               // Recommended actions
  detectionMethod String              // Method used for detection (ISOLATION_FOREST, LSTM_AUTOENCODER, etc.)
  detectedAt      DateTime            @default(now())
  acknowledgedAt  DateTime?           // When the anomaly was acknowledged
  resolvedAt      DateTime?           // When the anomaly was resolved
  status          AnomalyStatus       @default(OPEN)
  falsePositive   Boolean?            // Whether this was marked as false positive
  resourceType    String?             // Type of resource affected
  resourceId      String?             // ID of affected resource
  alertSent       Boolean             @default(false)
  tenantId        String
  userId          String?             // User who acknowledged/resolved
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  tenant          Tenant              @relation(fields: [tenantId], references: [id])
  user            User?               @relation(fields: [userId], references: [id])

  @@index([tenantId, anomalyType, status])
  @@index([isAnomaly, severity, detectedAt])
  @@index([resourceType, resourceId])
  @@map("ml_anomaly_detection")
}

model MLFeature {
  id              String              @id @default(cuid())
  modelId         String
  name            String              // Feature name
  type            MLFeatureType       // NUMERICAL, CATEGORICAL, TEXT, DATETIME, BOOLEAN
  description     String?             // Feature description
  dataType        String              // Data type (FLOAT, INT, STRING, etc.)
  sourceColumn    String?             // Source data column
  transformation  String?             // Transformation applied (LOG, NORMALIZE, ONE_HOT, etc.)
  importance      Float?              // Feature importance score
  isActive        Boolean             @default(true)
  statistics      Json?               // Feature statistics (mean, std, min, max, etc.)
  categories      String[]            // Categories for categorical features
  encoding        Json?               // Encoding information
  tenantId        String
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  model           MLModel             @relation(fields: [modelId], references: [id], onDelete: Cascade)
  tenant          Tenant              @relation(fields: [tenantId], references: [id])

  @@unique([modelId, name])
  @@index([modelId, isActive])
  @@map("ml_features")
}

model MLExperiment {
  id              String              @id @default(cuid())
  name            String
  description     String?
  modelId         String?             // Base model for experiment
  experimentType  MLExperimentType    // A_B_TEST, HYPERPARAMETER_TUNING, FEATURE_SELECTION, MODEL_COMPARISON
  status          MLExperimentStatus  @default(RUNNING)
  startDate       DateTime            @default(now())
  endDate         DateTime?
  configuration   Json                // Experiment configuration
  variants        Json                // Different variants being tested
  metrics         Json                // Experiment metrics and results
  winnerVariant   String?             // Winning variant ID
  confidence      Float?              // Statistical confidence in results
  significanceLevel Float?            // P-value or significance level
  sampleSize      Int?                // Sample size used
  results         Json?               // Detailed experiment results
  conclusions     String?             // Experiment conclusions
  isActive        Boolean             @default(true)
  tenantId        String
  userId          String?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  model           MLModel?            @relation(fields: [modelId], references: [id])
  tenant          Tenant              @relation(fields: [tenantId], references: [id])
  user            User?               @relation(fields: [userId], references: [id])

  @@index([tenantId, status])
  @@index([experimentType, isActive])
  @@map("ml_experiments")
}

model MLDataPipeline {
  id              String              @id @default(cuid())
  name            String
  description     String?
  pipelineType    MLPipelineType      // DATA_INGESTION, PREPROCESSING, FEATURE_ENGINEERING, MODEL_TRAINING, PREDICTION
  status          MLPipelineStatus    @default(ACTIVE)
  sourceConfig    Json                // Data source configuration
  steps           Json                // Pipeline steps configuration
  schedule        String?             // Cron schedule for automated runs
  lastRunAt       DateTime?           // Last execution time
  nextRunAt       DateTime?           // Next scheduled execution
  successCount    Int                 @default(0)
  failureCount    Int                 @default(0)
  avgExecutionTime Int?               // Average execution time in milliseconds
  outputDataPath  String?             // Path to output data
  logs            String?             // Pipeline execution logs
  errorMessage    String?             // Last error message
  isActive        Boolean             @default(true)
  tenantId        String
  userId          String?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  tenant          Tenant              @relation(fields: [tenantId], references: [id])
  user            User?               @relation(fields: [userId], references: [id])
  executions      MLPipelineExecution[]

  @@index([tenantId, status])
  @@index([isActive, nextRunAt])
  @@map("ml_data_pipelines")
}

model MLPipelineExecution {
  id              String              @id @default(cuid())
  pipelineId      String
  executionId     String              @unique
  status          MLExecutionStatus   @default(RUNNING)
  startTime       DateTime            @default(now())
  endTime         DateTime?
  duration        Int?                // Execution duration in milliseconds
  inputData       Json?               // Input data summary
  outputData      Json?               // Output data summary
  processedRecords Int?               // Number of records processed
  errorRecords    Int?                // Number of records with errors
  stepResults     Json?               // Results from individual steps
  logs            String?             // Execution logs
  errorMessage    String?             // Error message if failed
  retryCount      Int                 @default(0)
  tenantId        String
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  pipeline        MLDataPipeline      @relation(fields: [pipelineId], references: [id], onDelete: Cascade)
  tenant          Tenant              @relation(fields: [tenantId], references: [id])

  @@index([pipelineId, status])
  @@index([tenantId, startTime])
  @@map("ml_pipeline_executions")
}

model MLModelMetrics {
  id              String              @id @default(cuid())
  modelId         String
  metricType      MLMetricType        // ACCURACY, PRECISION, RECALL, F1_SCORE, MSE, MAE, R2_SCORE, AUC_ROC
  value           Float               // Metric value
  datasetType     String              // TRAINING, VALIDATION, TEST, PRODUCTION
  evaluationDate  DateTime            @default(now())
  sampleSize      Int?                // Number of samples used for evaluation
  metadata        Json?               // Additional metric metadata
  tenantId        String
  createdAt       DateTime            @default(now())

  model           MLModel             @relation(fields: [modelId], references: [id], onDelete: Cascade)
  tenant          Tenant              @relation(fields: [tenantId], references: [id])

  @@index([modelId, metricType, evaluationDate])
  @@index([tenantId, evaluationDate])
  @@map("ml_model_metrics")
}

// Add ML relations to existing models
// User model extensions for ML
// Tenant model extensions for ML

enum MLModelType {
  REGRESSION
  CLASSIFICATION
  CLUSTERING
  TIME_SERIES
  NEURAL_NETWORK
  ENSEMBLE
  DEEP_LEARNING
  REINFORCEMENT_LEARNING
}

enum MLModelStatus {
  TRAINING
  TRAINED
  DEPLOYED
  DEPRECATED
  FAILED
  TESTING
}

enum MLTrainingStatus {
  QUEUED
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
  PAUSED
}

enum MLPredictionType {
  SALES_FORECAST
  CASH_FLOW_PREDICTION
  PROJECT_TIMELINE
  CUSTOMER_BEHAVIOR
  ANOMALY_DETECTION
  RISK_ASSESSMENT
  DEMAND_FORECAST
  PRICE_OPTIMIZATION
  CHURN_PREDICTION
  LEAD_SCORING
}

enum MLAnomalyType {
  FINANCIAL
  PROJECT
  CUSTOMER_BEHAVIOR
  PERFORMANCE
  DATA_QUALITY
  SECURITY
  OPERATIONAL
}

enum AnomalySeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum AnomalyStatus {
  OPEN
  ACKNOWLEDGED
  RESOLVED
  FALSE_POSITIVE
  IGNORED
}

enum MLFeatureType {
  NUMERICAL
  CATEGORICAL
  TEXT
  DATETIME
  BOOLEAN
  GEOSPATIAL
  IMAGE
  AUDIO
}

enum MLExperimentType {
  A_B_TEST
  HYPERPARAMETER_TUNING
  FEATURE_SELECTION
  MODEL_COMPARISON
  CROSS_VALIDATION
  ENSEMBLE_TESTING
}

enum MLExperimentStatus {
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
  PAUSED
}

enum MLPipelineType {
  DATA_INGESTION
  PREPROCESSING
  FEATURE_ENGINEERING
  MODEL_TRAINING
  PREDICTION
  EVALUATION
  DEPLOYMENT
}

enum MLPipelineStatus {
  ACTIVE
  INACTIVE
  FAILED
  PAUSED
}

enum MLExecutionStatus {
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
  TIMEOUT
}

enum MLMetricType {
  ACCURACY
  PRECISION
  RECALL
  F1_SCORE
  MSE
  MAE
  R2_SCORE
  AUC_ROC
  AUC_PR
  LOG_LOSS
  CONFUSION_MATRIX
  FEATURE_IMPORTANCE
}

// ==================== EVENT-DRIVEN ORCHESTRATION MODELS ====================

model EventBus {
  id          String      @id @default(cuid())
  eventType   EventType
  eventName   String      // INVOICE_CREATED, TASK_COMPLETED, ANOMALY_DETECTED
  source      String      // Module that generated the event
  target      String?     // Target module (null for broadcast)
  payload     Json        // Event data
  metadata    Json?       // Additional metadata (user, tenant, timestamps)
  priority    EventPriority @default(MEDIUM)
  status      EventStatus @default(PENDING)
  retryCount  Int         @default(0)
  maxRetries  Int         @default(3)
  scheduledAt DateTime?   // For delayed events
  processedAt DateTime?   // When event was processed
  errorLog    String?     // Error details if failed
  tenantId    String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  tenant Tenant @relation(fields: [tenantId], references: [id])
  handlers EventHandler[]
  correlations EventCorrelation[]
  parentEventCorrelations EventCorrelation[] @relation("ParentEvent")

  @@index([eventType, status])
  @@index([tenantId, createdAt])
  @@index([scheduledAt, status])
  @@map("event_bus")
}

model EventHandler {
  id           String      @id @default(cuid())
  eventBusId   String
  handlerName  String      // Handler function name
  module       String      // Module that handles the event
  status       HandlerStatus @default(PENDING)
  executedAt   DateTime?
  executionTime Int?       // Execution time in milliseconds
  errorMessage String?
  result       Json?       // Handler execution result
  tenantId     String
  createdAt    DateTime    @default(now())

  eventBus EventBus @relation(fields: [eventBusId], references: [id], onDelete: Cascade)
  tenant   Tenant   @relation(fields: [tenantId], references: [id])

  @@index([eventBusId, status])
  @@map("event_handlers")
}

model EventCorrelation {
  id             String   @id @default(cuid())
  correlationId  String   // Unique correlation ID for related events
  eventBusId     String
  parentEventId  String?  // Parent event for chained events
  workflowId     String?  // Workflow this event belongs to
  sequenceNumber Int      @default(1)
  tenantId       String
  createdAt      DateTime @default(now())

  eventBus    EventBus  @relation(fields: [eventBusId], references: [id], onDelete: Cascade)
  parentEvent EventBus? @relation("ParentEvent", fields: [parentEventId], references: [id])
  tenant      Tenant    @relation(fields: [tenantId], references: [id])

  @@index([correlationId, sequenceNumber])
  @@index([workflowId])
  @@map("event_correlations")
}

model EventSubscription {
  id           String      @id @default(cuid())
  subscriberId String      // Module or service ID
  eventPattern String      // Event pattern to match (e.g., "finance.*", "project.task.completed")
  isActive     Boolean     @default(true)
  priority     Int         @default(100)
  filterConfig Json?       // Additional filtering configuration
  tenantId     String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  tenant Tenant @relation(fields: [tenantId], references: [id])

  @@index([subscriberId, isActive])
  @@index([eventPattern])
  @@map("event_subscriptions")
}

model WorkflowDefinition {
  id           String            @id @default(cuid())
  name         String
  description  String?
  version      String            @default("1.0")
  triggerEvent String            // Event that triggers this workflow
  steps        Json              // Workflow steps definition
  isActive     Boolean           @default(true)
  tenantId     String
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  tenant     Tenant              @relation(fields: [tenantId], references: [id])
  executions WorkflowExecution[]

  @@unique([name, version, tenantId])
  @@map("workflow_definitions")
}

model WorkflowExecution {
  id                   String               @id @default(cuid())
  workflowDefinitionId String
  correlationId        String               // Links to event correlation
  status               WorkflowExecStatus   @default(RUNNING)
  currentStep          Int                  @default(1)
  totalSteps           Int
  startTime            DateTime             @default(now())
  endTime              DateTime?
  inputData            Json
  outputData           Json?
  errorMessage         String?
  retryCount           Int                  @default(0)
  tenantId             String
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt

  workflowDefinition WorkflowDefinition @relation(fields: [workflowDefinitionId], references: [id])
  tenant             Tenant             @relation(fields: [tenantId], references: [id])
  steps              WorkflowStep[]

  @@index([workflowDefinitionId, status])
  @@index([correlationId])
  @@map("workflow_executions")
}

model WorkflowStep {
  id                  String            @id @default(cuid())
  workflowExecutionId String
  stepNumber          Int
  stepName            String
  stepType            StepType          // AI_ANALYSIS, HTTP_REQUEST, DATABASE_UPDATE, NOTIFICATION
  status              StepStatus        @default(PENDING)
  inputData           Json?
  outputData          Json?
  errorMessage        String?
  startTime           DateTime?
  endTime             DateTime?
  executionTime       Int?              // Execution time in milliseconds
  retryCount          Int               @default(0)
  tenantId            String
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  workflowExecution WorkflowExecution @relation(fields: [workflowExecutionId], references: [id], onDelete: Cascade)
  tenant            Tenant            @relation(fields: [tenantId], references: [id])

  @@index([workflowExecutionId, stepNumber])
  @@map("workflow_steps")
}

model RealTimeNotification {
  id           String              @id @default(cuid())
  userId       String?             // Null for broadcast notifications
  title        String
  message      String
  type         NotificationType
  severity     NotificationSeverity @default(INFO)
  data         Json?               // Additional notification data
  isRead       Boolean             @default(false)
  isPersistent Boolean             @default(false) // Whether to store in DB
  channel      String?             // WebSocket channel
  expiresAt    DateTime?           // When notification expires
  tenantId     String
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt

  user   User?  @relation(fields: [userId], references: [id])
  tenant Tenant @relation(fields: [tenantId], references: [id])

  @@index([userId, isRead])
  @@index([tenantId, type])
  @@index([expiresAt])
  @@map("realtime_notifications")
}

model AIOrchestrationMetrics {
  id                    String   @id @default(cuid())
  eventProcessedCount   Int      @default(0)
  avgProcessingTime     Float    @default(0) // in milliseconds
  successRate           Float    @default(0) // 0-1
  errorRate             Float    @default(0) // 0-1
  automationScore       Float    @default(0) // AI autonomy score 0-1
  workflowSuccessRate   Float    @default(0)
  aiDecisionAccuracy    Float    @default(0)
  userSatisfactionScore Float    @default(0)
  date                  DateTime @db.Date
  tenantId              String
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  tenant Tenant @relation(fields: [tenantId], references: [id])

  @@unique([date, tenantId])
  @@index([tenantId, date])
  @@map("ai_orchestration_metrics")
}



// ==================== EVENT ENUMS ====================

enum EventType {
  BUSINESS_EVENT    // Customer created, invoice generated, etc.
  SYSTEM_EVENT      // System startup, shutdown, etc.
  AI_EVENT          // AI prediction, insight generated, etc.
  USER_EVENT        // User login, action performed, etc.
  INTEGRATION_EVENT // External system events
  WORKFLOW_EVENT    // Workflow state changes
  MONITORING_EVENT  // Performance, health checks
}

enum EventPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
  URGENT
}

enum EventStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  RETRYING
  CANCELLED
  EXPIRED
}

enum HandlerStatus {
  PENDING
  EXECUTING
  COMPLETED
  FAILED
  SKIPPED
}

enum WorkflowExecStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  PAUSED
  CANCELLED
}

enum StepType {
  AI_ANALYSIS
  AI_DECISION
  HTTP_REQUEST
  DATABASE_UPDATE
  NOTIFICATION
  EMAIL_SEND
  WEBHOOK_CALL
  DATA_TRANSFORM
  CONDITIONAL
  PARALLEL
  DELAY
}

enum StepStatus {
  PENDING
  EXECUTING
  COMPLETED
  FAILED
  SKIPPED
  RETRYING
}

enum SystemNotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
  AI_INSIGHT
  WORKFLOW_UPDATE
  BUSINESS_ALERT
  SYSTEM_NOTIFICATION
}

enum NotificationSeverity {
  INFO
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

// ==================== SELF-LEARNING SYSTEMS MODELS (SPRINT 1.5) ====================

// Reinforcement Learning Agent Model
model RLAgent {
  id              String              @id @default(cuid())
  name            String
  description     String?
  agentType       RLAgentType         // Q_LEARNING, POLICY_GRADIENT, ACTOR_CRITIC, MULTI_ARMED_BANDIT
  environment     String              // Environment name (PROJECT_OPTIMIZATION, RESOURCE_ALLOCATION, etc.)
  state           Json                // Current agent state
  policy          Json                // Agent policy (Q-table, neural network weights, etc.)
  hyperparameters Json                // Learning rate, epsilon, discount factor, etc.
  performance     Json                // Performance metrics (cumulative reward, success rate, etc.)
  isActive        Boolean             @default(true)
  version         String              @default("1.0")
  lastTraining    DateTime?           // Last training session
  totalEpisodes   Int                 @default(0)
  totalReward     Float               @default(0)
  avgReward       Float               @default(0)
  explorationRate Float               @default(0.1) // Epsilon for epsilon-greedy
  learningRate    Float               @default(0.01)
  discountFactor  Float               @default(0.95)
  tenantId        String
  userId          String?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  tenant          Tenant              @relation(fields: [tenantId], references: [id])
  user            User?               @relation(fields: [userId], references: [id])
  episodes        RLEpisode[]
  actions         RLAction[]
  states          RLState[]
  rewards         RLReward[]
  
  // Self-learning relations
  hyperparameterTuning  HyperparameterTuning[]
  modelPerformance      ModelPerformance[]
  conceptDrift          ConceptDrift[]
  onlineLearningSessions OnlineLearningSession[]
  sourceTransfers       TransferLearning[] @relation("SourceAgent")
  targetTransfers       TransferLearning[] @relation("TargetAgent")
  adaptiveLearning      AdaptiveLearning[]

  @@index([tenantId, agentType, isActive])
  @@index([environment, isActive])
  @@map("rl_agents")
}

// Reinforcement Learning Episode Model
model RLEpisode {
  id              String              @id @default(cuid())
  agentId         String
  episodeNumber   Int
  startTime       DateTime            @default(now())
  endTime         DateTime?
  totalSteps      Int                 @default(0)
  totalReward     Float               @default(0)
  avgReward       Float               @default(0)
  finalState      Json?               // Final state of the episode
  isCompleted     Boolean             @default(false)
  success         Boolean?            // Whether episode was successful
  metadata        Json?               // Additional episode data
  tenantId        String
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  agent           RLAgent             @relation(fields: [agentId], references: [id], onDelete: Cascade)
  tenant          Tenant              @relation(fields: [tenantId], references: [id])
  actions         RLAction[]
  rewards         RLReward[]

  @@unique([agentId, episodeNumber])
  @@index([agentId, isCompleted])
  @@map("rl_episodes")
}

// Reinforcement Learning Action Model
model RLAction {
  id              String              @id @default(cuid())
  agentId         String
  episodeId       String?
  actionType      String              // Action type identifier
  actionData      Json                // Action parameters
  state           Json                // State when action was taken
  qValue          Float?              // Q-value for this state-action pair
  probability     Float?              // Action probability (for policy gradient)
  reward          Float?              // Immediate reward received
  nextState       Json?               // Resulting state after action
  timestamp       DateTime            @default(now())
  step            Int                 @default(0) // Step number in episode
  tenantId        String
  createdAt       DateTime            @default(now())

  agent           RLAgent             @relation(fields: [agentId], references: [id], onDelete: Cascade)
  episode         RLEpisode?          @relation(fields: [episodeId], references: [id], onDelete: Cascade)
  tenant          Tenant              @relation(fields: [tenantId], references: [id])

  @@index([agentId, timestamp])
  @@index([episodeId, step])
  @@map("rl_actions")
}

// Reinforcement Learning State Model
model RLState {
  id              String              @id @default(cuid())
  agentId         String
  stateData       Json                // State representation
  stateHash       String              // Hash for quick state lookup
  visitCount      Int                 @default(1)
  value           Float?              // State value (for value-based methods)
  actionValues    Json?               // Q-values for all actions from this state
  isTerminal      Boolean             @default(false)
  lastVisited     DateTime            @default(now())
  tenantId        String
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  agent           RLAgent             @relation(fields: [agentId], references: [id], onDelete: Cascade)
  tenant          Tenant              @relation(fields: [tenantId], references: [id])

  @@unique([agentId, stateHash])
  @@index([agentId, visitCount])
  @@map("rl_states")
}

// Reinforcement Learning Reward Model
model RLReward {
  id              String              @id @default(cuid())
  agentId         String
  episodeId       String?
  rewardType      RLRewardType        // IMMEDIATE, DELAYED, SPARSE, SHAPED
  value           Float               // Reward value
  source          String              // Source of reward (USER_FEEDBACK, SYSTEM_METRIC, etc.)
  context         Json?               // Context when reward was given
  timestamp       DateTime            @default(now())
  processed       Boolean             @default(false) // Whether used in learning update
  tenantId        String
  createdAt       DateTime            @default(now())

  agent           RLAgent             @relation(fields: [agentId], references: [id], onDelete: Cascade)
  episode         RLEpisode?          @relation(fields: [episodeId], references: [id], onDelete: Cascade)
  tenant          Tenant              @relation(fields: [tenantId], references: [id])

  @@index([agentId, timestamp])
  @@index([source, processed])
  @@map("rl_rewards")
}

// User Feedback Model
model UserFeedback {
  id              String              @id @default(cuid())
  userId          String
  feedbackType    UserFeedbackType    // EXPLICIT, IMPLICIT, RATING, PREFERENCE
  targetType      String              // MODEL_PREDICTION, AI_DECISION, RECOMMENDATION, etc.
  targetId        String              // ID of the target entity
  rating          Int?                // Numeric rating (1-5 or 1-10)
  sentiment       FeedbackSentiment?  // POSITIVE, NEGATIVE, NEUTRAL
  comment         String?             // Text feedback
  data            Json?               // Structured feedback data
  context         Json?               // Context when feedback was given
  processed       Boolean             @default(false) // Whether feedback was used for learning
  weight          Float               @default(1.0)   // Feedback weight/importance
  tenantId        String
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  user            User                @relation(fields: [userId], references: [id])
  tenant          Tenant              @relation(fields: [tenantId], references: [id])

  @@index([userId, feedbackType])
  @@index([targetType, targetId])
  @@index([tenantId, processed])
  @@map("user_feedback")
}

// User Preference Model
model UserPreference {
  id              String              @id @default(cuid())
  userId          String
  preferenceType  String              // UI_LAYOUT, NOTIFICATION_FREQUENCY, AI_AGGRESSIVENESS, etc.
  key             String              // Preference key
  value           Json                // Preference value
  source          PreferenceSource    // EXPLICIT, IMPLICIT, LEARNED
  confidence      Float               @default(0.5) // Confidence in this preference (0-1)
  lastUpdated     DateTime            @default(now())
  updateCount     Int                 @default(1)
  tenantId        String
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  user            User                @relation(fields: [userId], references: [id])
  tenant          Tenant              @relation(fields: [tenantId], references: [id])

  @@unique([userId, preferenceType, key])
  @@index([userId, source])
  @@map("user_preferences")
}

// Implicit Feedback Model (behavioral data)
model ImplicitFeedback {
  id              String              @id @default(cuid())
  userId          String?             // Null for anonymous users
  sessionId       String?             // Session identifier
  action          String              // CLICK, HOVER, SCROLL, TIME_SPENT, etc.
  targetType      String              // PREDICTION, RECOMMENDATION, BUTTON, etc.
  targetId        String?             // ID of target entity
  value           Float?              // Numeric value (time spent, click count, etc.)
  context         Json                // Context data (page, time, device, etc.)
  timestamp       DateTime            @default(now())
  processed       Boolean             @default(false)
  tenantId        String
  createdAt       DateTime            @default(now())

  user            User?               @relation(fields: [userId], references: [id])
  tenant          Tenant              @relation(fields: [tenantId], references: [id])

  @@index([userId, action, timestamp])
  @@index([targetType, targetId])
  @@index([tenantId, processed])
  @@map("implicit_feedback")
}

// Hyperparameter Tuning Model
model HyperparameterTuning {
  id              String              @id @default(cuid())
  modelId         String?             // Target model for tuning
  agentId         String?             // Target RL agent for tuning
  tuningMethod    TuningMethod        // GRID_SEARCH, RANDOM_SEARCH, BAYESIAN, GENETIC_ALGORITHM
  searchSpace     Json                // Parameter search space definition
  objective       String              // Optimization objective (accuracy, f1_score, etc.)
  currentParams   Json                // Current best parameters
  bestParams      Json?               // Best parameters found so far
  bestScore       Float?              // Best objective score achieved
  iterations      Int                 @default(0)
  maxIterations   Int                 @default(100)
  status          TuningStatus        @default(RUNNING)
  startTime       DateTime            @default(now())
  endTime         DateTime?
  results         Json?               // Detailed tuning results
  tenantId        String
  userId          String?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  model           MLModel?            @relation(fields: [modelId], references: [id])
  agent           RLAgent?            @relation(fields: [agentId], references: [id])
  tenant          Tenant              @relation(fields: [tenantId], references: [id])
  user            User?               @relation(fields: [userId], references: [id])

  @@index([modelId, status])
  @@index([agentId, status])
  @@map("hyperparameter_tuning")
}

// Model Performance Tracking
model ModelPerformance {
  id              String              @id @default(cuid())
  modelId         String?
  agentId         String?
  metricName      String              // ACCURACY, LOSS, REWARD, F1_SCORE, etc.
  metricValue     Float
  baseline        Float?              // Baseline value for comparison
  improvement     Float?              // Improvement over baseline
  dataWindow      String              // Time window (HOUR, DAY, WEEK, MONTH)
  sampleSize      Int?                // Number of samples
  timestamp       DateTime            @default(now())
  version         String?             // Model/agent version
  environment     String?             // Environment or context
  tenantId        String
  createdAt       DateTime            @default(now())

  model           MLModel?            @relation(fields: [modelId], references: [id])
  agent           RLAgent?            @relation(fields: [agentId], references: [id])
  tenant          Tenant              @relation(fields: [tenantId], references: [id])

  @@index([modelId, metricName, timestamp])
  @@index([agentId, metricName, timestamp])
  @@map("model_performance")
}

// Concept Drift Detection
model ConceptDrift {
  id              String              @id @default(cuid())
  modelId         String?
  agentId         String?
  driftType       DriftType           // SUDDEN, GRADUAL, RECURRING, INCREMENTAL
  detectionMethod String              // STATISTICAL_TEST, KL_DIVERGENCE, PERFORMANCE_DECAY
  severity        DriftSeverity       // LOW, MEDIUM, HIGH, CRITICAL
  confidence      Float               // Confidence in drift detection (0-1)
  driftScore      Float               // Numerical drift score
  baseline        Json                // Baseline distribution/performance
  current         Json                // Current distribution/performance
  detectedAt      DateTime            @default(now())
  acknowledgedAt  DateTime?
  adaptedAt       DateTime?           // When model was adapted
  status          DriftStatus         @default(DETECTED)
  recommendation  String?             // Recommended action
  metadata        Json?               // Additional drift information
  tenantId        String
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  model           MLModel?            @relation(fields: [modelId], references: [id])
  agent           RLAgent?            @relation(fields: [agentId], references: [id])
  tenant          Tenant              @relation(fields: [tenantId], references: [id])

  @@index([modelId, severity, detectedAt])
  @@index([agentId, severity, detectedAt])
  @@map("concept_drift")
}

// AutoML Experiment Model
model AutoMLExperiment {
  id              String              @id @default(cuid())
  name            String
  description     String?
  experimentType  AutoMLType          // NEURAL_ARCHITECTURE_SEARCH, AUTOML_PIPELINE, FEATURE_SELECTION
  dataset         Json                // Dataset configuration
  objective       String              // Optimization objective
  constraints     Json?               // Resource/time constraints
  searchSpace     Json                // Search space definition
  bestModel       Json?               // Best model configuration found
  bestScore       Float?              // Best score achieved
  totalTrials     Int                 @default(0)
  maxTrials       Int                 @default(100)
  timeLimit       Int?                // Time limit in minutes
  status          AutoMLStatus        @default(RUNNING)
  startTime       DateTime            @default(now())
  endTime         DateTime?
  results         Json?               // Experiment results
  leaderboard     Json?               // Model leaderboard
  tenantId        String
  userId          String?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  tenant          Tenant              @relation(fields: [tenantId], references: [id])
  user            User?               @relation(fields: [userId], references: [id])

  @@index([tenantId, status])
  @@index([experimentType, status])
  @@map("automl_experiments")
}

// Online Learning Session
model OnlineLearningSession {
  id              String              @id @default(cuid())
  modelId         String?
  agentId         String?
  sessionType     OnlineLearningType  // INCREMENTAL, BATCH_INCREMENTAL, STREAMING
  learningRate    Float               @default(0.01)
  adaptationRate  Float               @default(0.1)
  memorySize      Int?                // Size of replay buffer/memory
  batchSize       Int                 @default(32)
  updateFrequency Int                 @default(100) // Updates every N samples
  samplesProcessed Int                @default(0)
  totalUpdates    Int                 @default(0)
  currentLoss     Float?
  avgLoss         Float?
  status          LearningSessionStatus @default(ACTIVE)
  startTime       DateTime            @default(now())
  lastUpdate      DateTime?
  endTime         DateTime?
  metadata        Json?               // Session configuration and metrics
  tenantId        String
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  model           MLModel?            @relation(fields: [modelId], references: [id])
  agent           RLAgent?            @relation(fields: [agentId], references: [id])
  tenant          Tenant              @relation(fields: [tenantId], references: [id])

  @@index([modelId, status])
  @@index([agentId, status])
  @@map("online_learning_sessions")
}

// Transfer Learning Model
model TransferLearning {
  id              String              @id @default(cuid())
  sourceModelId   String?             // Source model for transfer
  targetModelId   String?             // Target model receiving transfer
  sourceAgentId   String?             // Source RL agent
  targetAgentId   String?             // Target RL agent
  transferType    TransferType        // WEIGHTS, FEATURES, KNOWLEDGE, POLICY
  similarity      Float?              // Similarity between source and target (0-1)
  transferMethod  String              // FINE_TUNING, FEATURE_EXTRACTION, DOMAIN_ADAPTATION
  layersTransferred Json?             // Which layers/components were transferred
  freezeLayers    Json?               // Which layers to freeze during transfer
  performance     Json?               // Transfer learning performance metrics
  improvement     Float?              // Performance improvement achieved
  status          TransferStatus      @default(PENDING)
  startTime       DateTime            @default(now())
  endTime         DateTime?
  metadata        Json?               // Transfer configuration and results
  tenantId        String
  userId          String?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  sourceModel     MLModel?            @relation("SourceModel", fields: [sourceModelId], references: [id])
  targetModel     MLModel?            @relation("TargetModel", fields: [targetModelId], references: [id])
  sourceAgent     RLAgent?            @relation("SourceAgent", fields: [sourceAgentId], references: [id])
  targetAgent     RLAgent?            @relation("TargetAgent", fields: [targetAgentId], references: [id])
  tenant          Tenant              @relation(fields: [tenantId], references: [id])
  user            User?               @relation(fields: [userId], references: [id])

  @@index([sourceModelId, targetModelId])
  @@index([sourceAgentId, targetAgentId])
  @@map("transfer_learning")
}

// Adaptive Learning Configuration
model AdaptiveLearning {
  id              String              @id @default(cuid())
  modelId         String?
  agentId         String?
  adaptationType  AdaptationType      // LEARNING_RATE, ARCHITECTURE, THRESHOLD, STRATEGY
  trigger         String              // PERFORMANCE_DECAY, DRIFT_DETECTED, TIME_BASED, USER_FEEDBACK
  threshold       Float?              // Trigger threshold
  currentValue    Float?              // Current parameter value
  targetValue     Float?              // Target parameter value
  adaptationRule  Json                // Adaptation rule/algorithm
  history         Json                // Adaptation history
  isActive        Boolean             @default(true)
  lastAdaptation  DateTime?
  adaptationCount Int                 @default(0)
  tenantId        String
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  model           MLModel?            @relation(fields: [modelId], references: [id])
  agent           RLAgent?            @relation(fields: [agentId], references: [id])
  tenant          Tenant              @relation(fields: [tenantId], references: [id])

  @@index([modelId, adaptationType, isActive])
  @@index([agentId, adaptationType, isActive])
  @@map("adaptive_learning")
}



// ==================== SELF-LEARNING ENUMS ====================

enum RLAgentType {
  Q_LEARNING
  DEEP_Q_NETWORK
  POLICY_GRADIENT
  ACTOR_CRITIC
  MULTI_ARMED_BANDIT
  THOMPSON_SAMPLING
  UCB
  SARSA
  TEMPORAL_DIFFERENCE
}

enum RLRewardType {
  IMMEDIATE
  DELAYED
  SPARSE
  SHAPED
  INTRINSIC
  EXTRINSIC
}

enum UserFeedbackType {
  EXPLICIT
  IMPLICIT
  RATING
  PREFERENCE
  CORRECTION
  APPROVAL
  DISAPPROVAL
}

enum FeedbackSentiment {
  POSITIVE
  NEGATIVE
  NEUTRAL
  MIXED
}

enum PreferenceSource {
  EXPLICIT
  IMPLICIT
  LEARNED
  INHERITED
  DEFAULT
}

enum TuningMethod {
  GRID_SEARCH
  RANDOM_SEARCH
  BAYESIAN_OPTIMIZATION
  GENETIC_ALGORITHM
  SIMULATED_ANNEALING
  PARTICLE_SWARM
  HYPERBAND
  OPTUNA
}

enum TuningStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
  PAUSED
}

enum DriftType {
  SUDDEN
  GRADUAL
  RECURRING
  INCREMENTAL
  CYCLICAL
}

enum DriftSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum DriftStatus {
  DETECTED
  ACKNOWLEDGED
  ADAPTING
  ADAPTED
  IGNORED
  FALSE_POSITIVE
}

enum AutoMLType {
  NEURAL_ARCHITECTURE_SEARCH
  AUTOML_PIPELINE
  FEATURE_SELECTION
  HYPERPARAMETER_OPTIMIZATION
  MODEL_SELECTION
  ENSEMBLE_OPTIMIZATION
}

enum AutoMLStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
  PAUSED
}

enum OnlineLearningType {
  INCREMENTAL
  BATCH_INCREMENTAL
  STREAMING
  MINI_BATCH
  STOCHASTIC
}

enum LearningSessionStatus {
  ACTIVE
  PAUSED
  COMPLETED
  FAILED
  CANCELLED
}

enum TransferType {
  WEIGHTS
  FEATURES
  KNOWLEDGE
  POLICY
  ARCHITECTURE
  PARAMETERS
}

enum TransferStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  CANCELLED
}

enum AdaptationType {
  LEARNING_RATE
  ARCHITECTURE
  THRESHOLD
  STRATEGY
  HYPERPARAMETER
  POLICY
}

// SPRINT 2.6 - Project Analytics & Reporting Enums

enum ProjectHealthStatus {
  EXCELLENT
  GOOD
  FAIR
  POOR
  CRITICAL
}

enum ProjectPredictionType {
  COMPLETION_DATE
  BUDGET_OVERRUN
  RESOURCE_REQUIREMENT
  SUCCESS_PROBABILITY
  RISK_LEVEL
  QUALITY_SCORE
}

enum ProjectInsightType {
  PERFORMANCE
  RISK
  OPTIMIZATION
  PREDICTION
  RECOMMENDATION
  ANOMALY
}

enum TeamPerformanceCategory {
  PRODUCTIVITY
  QUALITY
  COLLABORATION
  EFFICIENCY
  INNOVATION
  DELIVERY
}

enum ResourceUtilizationType {
  TIME
  SKILLS
  CAPACITY
  COST
  AVAILABILITY
  WORKLOAD
}

enum ProjectAnalyticsReportType {
  PROJECT_PERFORMANCE
  TEAM_ANALYTICS
  RESOURCE_OPTIMIZATION
  EXECUTIVE_SUMMARY
  CUSTOM_ANALYSIS
  BENCHMARK_COMPARISON
}

enum OptimizationStrategy {
  LOAD_BALANCING
  SKILL_MATCHING
  COST_REDUCTION
  TIME_OPTIMIZATION
  CAPACITY_PLANNING
  WORKFLOW_IMPROVEMENT
}

enum InsightPriorityLevel {
  CRITICAL
  HIGH
  MEDIUM
  LOW
  INFO
}

// Cross-Module Analytics Models for Sprint 2.7
model UnifiedAnalyticsDashboard {
  id                    String   @id @default(cuid())
  name                  String
  description           String?
  modules               Json     // Array of module names included
  layout                Json     // Dashboard layout configuration
  widgets               Json     // Widget configurations
  filters               Json     // Global filters
  permissions           Json     // Access permissions
  isDefault             Boolean  @default(false)
  isPublic              Boolean  @default(false)
  tenantId              String
  userId                String
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  tenant                Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  reports               UnifiedReport[]

  @@unique([tenantId, userId, name])
  @@map("unified_analytics_dashboards")
}

model CrossModuleMetric {
  id                    String   @id @default(cuid())
  metricName            String
  sourceModule          String   // weFINANCE, wePROJECT, weANALYTICS, etc.
  targetModule          String?  // For correlation metrics
  category              String   // FINANCIAL, PROJECT, PERFORMANCE, etc.
  value                 Float
  metadata              Json
  correlationData       Json?    // Cross-module correlation data
  period                String   // DAILY, WEEKLY, MONTHLY, QUARTERLY
  startDate             DateTime
  endDate               DateTime
  tenantId              String
  userId                String?
  createdAt             DateTime @default(now())

  // Relations
  tenant                Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user                  User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([tenantId, metricName, sourceModule, period, startDate])
  @@map("cross_module_metrics")
}

model UnifiedReport {
  id                    String   @id @default(cuid())
  name                  String
  description           String?
  reportType            UnifiedReportType
  modules               Json     // Modules included in report
  template              Json     // Report template configuration
  parameters            Json     // Report parameters and filters
  schedule              Json?    // Scheduled report configuration
  format                ReportFormat
  isScheduled           Boolean  @default(false)
  isPublic              Boolean  @default(false)
  lastGenerated         DateTime?
  tenantId              String
  userId                String
  dashboardId           String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  tenant                Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  dashboard             UnifiedAnalyticsDashboard? @relation(fields: [dashboardId], references: [id], onDelete: SetNull)
  executions            UnifiedReportExecution[]

  @@unique([tenantId, userId, name])
  @@map("unified_reports")
}

model UnifiedReportExecution {
  id                    String   @id @default(cuid())
  reportId              String
  executionType         ExecutionType
  status                ExecutionStatus
  parameters            Json     // Execution parameters
  result                Json?    // Generated report data
  filePath              String?  // File path for exported reports
  error                 String?  // Error message if failed
  duration              Int?     // Execution duration in milliseconds
  tenantId              String
  userId                String
  executedAt            DateTime @default(now())

  // Relations
  report                UnifiedReport @relation(fields: [reportId], references: [id], onDelete: Cascade)
  tenant                Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("unified_report_executions")
}

model AIOrchestrationSession {
  id                    String   @id @default(cuid())
  sessionName           String
  modules               Json     // Modules being orchestrated
  objectives            Json     // AI objectives and goals
  context               Json     // Session context and data
  results               Json?    // Orchestration results
  insights              Json?    // Generated insights
  recommendations       Json?    // AI recommendations
  status                OrchestrationStatus
  priority              OrchestrationPriority
  tenantId              String
  userId                String
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  completedAt           DateTime?

  // Relations
  tenant                Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks                 OrchestrationTask[]

  @@map("ai_orchestration_sessions")
}

model OrchestrationTask {
  id                    String   @id @default(cuid())
  sessionId             String
  taskName              String
  taskType              OrchestrationTaskType
  module                String   // Source module
  inputs                Json     // Task inputs
  outputs               Json?    // Task outputs
  status                TaskExecutionStatus
  priority              Int      @default(5)
  dependencies          Json?    // Task dependencies
  retryCount            Int      @default(0)
  maxRetries            Int      @default(3)
  error                 String?
  startedAt             DateTime?
  completedAt           DateTime?
  tenantId              String
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  session               AIOrchestrationSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  tenant                Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("orchestration_tasks")
}

// New Enums for Sprint 2.7
enum UnifiedReportType {
  EXECUTIVE_SUMMARY
  CROSS_MODULE_ANALYSIS
  PERFORMANCE_REPORT
  FINANCIAL_ANALYTICS
  PROJECT_PORTFOLIO
  CUSTOM_REPORT
}

enum ExecutionType {
  MANUAL
  SCHEDULED
  TRIGGERED
  API_CALL
}

enum ExecutionStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum OrchestrationStatus {
  PENDING
  INITIALIZING
  RUNNING
  COMPLETED
  FAILED
  PAUSED
  CANCELLED
}

enum OrchestrationPriority {
  CRITICAL
  HIGH
  MEDIUM
  LOW
}

enum OrchestrationTaskType {
  DATA_COLLECTION
  ANALYTICS_PROCESSING
  INSIGHT_GENERATION
  PREDICTION_MODELING
  RECOMMENDATION_ENGINE
  CROSS_MODULE_CORRELATION
  PERFORMANCE_OPTIMIZATION
}

enum TaskExecutionStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  SKIPPED
  RETRYING
}

enum PredictionConfidenceLevel {
  VERY_LOW
  LOW
  MEDIUM
  HIGH
  VERY_HIGH
}

// SPRINT 2.8 - KI-AUTONOMIE ENUMS
enum AIAgentType {
  COORDINATOR
  SPECIALIST
  MONITOR
  OPTIMIZER
  ANALYZER
  PREDICTOR
}

enum AIAgentStatus {
  IDLE
  BUSY
  LEARNING
  ANALYZING
  OPTIMIZING
  ERROR
  MAINTENANCE
}

enum SystemStatus {
  HEALTHY
  WARNING
  CRITICAL
  DOWN
  RECOVERING
}

enum IncidentSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum IncidentStatus {
  OPEN
  INVESTIGATING
  RESOLVED
  CLOSED
}

// SPRINT 2.9 - BEST-IN-CLASS ENUMS
enum MFADeviceType {
  TOTP
  SMS
  EMAIL
  HARDWARE_TOKEN
  BIOMETRIC
}

enum SecurityEventType {
  LOGIN
  LOGOUT
  LOGIN_FAILED
  MFA_SUCCESS
  MFA_FAILURE
  PASSWORD_CHANGE
  ACCOUNT_LOCKED
  SUSPICIOUS_ACTIVITY
  DATA_ACCESS
  PERMISSION_CHANGE
}

enum SecurityStatus {
  SUCCESS
  FAILURE
  BLOCKED
  MONITORED
}

enum NotificationStatus {
  PENDING
  SENT
  DELIVERED
  FAILED
  CLICKED
}

enum BackupType {
  FULL
  INCREMENTAL
  DIFFERENTIAL
}

enum BackupStatus {
  SCHEDULED
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

// SPRINT 2.6 - Project Analytics & Reporting Models

model ProjectMetrics {
  id                    String   @id @default(cuid())
  projectId             String
  metricType            String   // VELOCITY, BURN_RATE, QUALITY_SCORE, etc.
  value                 Float
  target                Float?
  unit                  String   // HOURS, POINTS, PERCENTAGE, etc.
  period                String   // DAILY, WEEKLY, MONTHLY, SPRINT
  date                  DateTime
  calculationMethod     String?  // How the metric was calculated
  metadata              Json?    // Additional metric context
  tenantId              String
  createdAt             DateTime @default(now())

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tenant  Tenant  @relation(fields: [tenantId], references: [id])

  @@unique([projectId, metricType, period, date])
  @@index([tenantId, projectId, date])
  @@map("project_metrics")
}

model ProjectHealthScore {
  id                    String              @id @default(cuid())
  projectId             String
  overallScore          Float               // 0-100 overall health score
  status                ProjectHealthStatus
  budgetHealth          Float               // 0-100 budget health
  scheduleHealth        Float               // 0-100 schedule health
  qualityHealth         Float               // 0-100 quality health
  teamHealth            Float               // 0-100 team health
  riskHealth            Float               // 0-100 risk health
  factors               Json                // Detailed factor analysis
  recommendations       Json?               // AI-generated recommendations
  calculatedAt          DateTime
  tenantId              String
  createdAt             DateTime            @default(now())

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tenant  Tenant  @relation(fields: [tenantId], references: [id])

  @@index([tenantId, projectId, calculatedAt])
  @@map("project_health_scores")
}

model ProjectPrediction {
  id                    String                    @id @default(cuid())
  projectId             String
  type                  ProjectPredictionType
  predictedValue        Float
  actualValue           Float?
  confidence            PredictionConfidenceLevel
  confidenceScore       Float                     // 0-1 confidence score
  predictionDate        DateTime
  targetDate            DateTime
  features              Json                      // Input features used
  modelVersion          String
  accuracy              Float?                    // When actual is available
  tenantId              String
  userId                String
  createdAt             DateTime                  @default(now())
  updatedAt             DateTime                  @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tenant  Tenant  @relation(fields: [tenantId], references: [id])
  user    User    @relation("ProjectPredictions", fields: [userId], references: [id])

  @@index([tenantId, projectId, type])
  @@index([tenantId, predictionDate])
  @@map("project_predictions")
}

model ProjectInsight {
  id                    String               @id @default(cuid())
  projectId             String
  type                  ProjectInsightType
  priority              InsightPriorityLevel
  title                 String
  description           String
  insights              Json                 // Detailed insights data
  recommendations       Json?                // AI-generated recommendations
  confidence            Float                // 0-1 confidence in insight
  isActionable          Boolean              @default(true)
  isRead                Boolean              @default(false)
  isDismissed           Boolean              @default(false)
  tenantId              String
  createdAt             DateTime             @default(now())
  expiresAt             DateTime?

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tenant  Tenant  @relation(fields: [tenantId], references: [id])

  @@index([tenantId, projectId, type])
  @@index([tenantId, priority, isRead])
  @@map("project_insights")
}

model TeamPerformanceMetrics {
  id                    String                   @id @default(cuid())
  userId                String?                  // Specific user or null for team-wide
  projectId             String?                  // Specific project or null for overall
  category              TeamPerformanceCategory
  metricName            String
  value                 Float
  target                Float?
  period                String                   // DAILY, WEEKLY, MONTHLY, QUARTERLY
  startDate             DateTime
  endDate               DateTime
  calculationMethod     String?
  metadata              Json?
  tenantId              String
  createdAt             DateTime                 @default(now())

  user    User?    @relation(fields: [userId], references: [id])
  project Project? @relation(fields: [projectId], references: [id])
  tenant  Tenant   @relation(fields: [tenantId], references: [id])

  @@unique([userId, projectId, category, metricName, period, startDate])
  @@index([tenantId, userId, startDate])
  @@index([tenantId, projectId, startDate])
  @@map("team_performance_metrics")
}

model TeamCollaborationScore {
  id                    String   @id @default(cuid())
  projectId             String?  // Null for overall team collaboration
  teamMemberIds         String[] // Array of user IDs in the collaboration
  collaborationScore    Float    // 0-100 collaboration effectiveness
  communicationScore    Float    // 0-100 communication quality
  coordinationScore     Float    // 0-100 coordination effectiveness
  knowledgeSharingScore Float    // 0-100 knowledge sharing
  factors               Json     // Detailed factor analysis
  period                String   // WEEKLY, MONTHLY, QUARTERLY
  startDate             DateTime
  endDate               DateTime
  tenantId              String
  createdAt             DateTime @default(now())

  project Project? @relation(fields: [projectId], references: [id])
  tenant  Tenant   @relation(fields: [tenantId], references: [id])

  @@index([tenantId, projectId, startDate])
  @@map("team_collaboration_scores")
}

model ResourceUtilization {
  id                    String                 @id @default(cuid())
  userId                String?                // Specific user or null for overall
  projectId             String?                // Specific project or null for overall
  type                  ResourceUtilizationType
  totalCapacity         Float                  // Total available capacity
  utilizedCapacity      Float                  // Actually utilized capacity
  utilizationRate       Float                  // 0-1 utilization percentage
  efficiency            Float?                 // 0-1 efficiency score
  cost                  Float?                 // Associated cost
  period                String                 // DAILY, WEEKLY, MONTHLY
  date                  DateTime
  metadata              Json?                  // Additional context
  tenantId              String
  createdAt             DateTime               @default(now())

  user    User?    @relation(fields: [userId], references: [id])
  project Project? @relation(fields: [projectId], references: [id])
  tenant  Tenant   @relation(fields: [tenantId], references: [id])

  @@unique([userId, projectId, type, period, date])
  @@index([tenantId, date])
  @@map("resource_utilizations")
}

model ResourceOptimization {
  id                    String              @id @default(cuid())
  name                  String
  description           String?
  strategy              OptimizationStrategy
  targetMetric          String              // What metric to optimize
  currentValue          Float               // Current metric value
  targetValue           Float               // Target metric value
  estimatedImprovement  Float               // Expected improvement %
  recommendations       Json                // Optimization recommendations
  priority              InsightPriorityLevel
  status                String              @default("PENDING")
  implementedAt         DateTime?
  results               Json?               // Implementation results
  tenantId              String
  userId                String              // Creator
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt

  tenant Tenant @relation(fields: [tenantId], references: [id])
  user   User   @relation("ResourceOptimizations", fields: [userId], references: [id])

  @@index([tenantId, strategy, priority])
  @@map("resource_optimizations")
}

model ProjectAnalyticsReport {
  id                    String                      @id @default(cuid())
  name                  String
  type                  ProjectAnalyticsReportType
  description           String?
  projectIds            String[]                    // Projects included in report
  userIds               String[]                    // Users included (if applicable)
  filters               Json?                       // Applied filters
  data                  Json                        // Report data
  insights              Json?                       // AI-generated insights
  recommendations       Json?                       // AI-generated recommendations
  generatedBy           String                      // USER or AI
  format                String                      // PDF, EXCEL, JSON
  fileUrl               String?                     // Generated file URL
  isScheduled           Boolean                     @default(false)
  schedule              Json?                       // Schedule configuration
  tenantId              String
  userId                String
  createdAt             DateTime                    @default(now())
  updatedAt             DateTime                    @updatedAt

  tenant Tenant @relation(fields: [tenantId], references: [id])
  user   User   @relation("ProjectAnalyticsReports", fields: [userId], references: [id])

  @@index([tenantId, type, createdAt])
  @@map("project_analytics_reports")
}

model TeamPerformanceReview {
  id                    String   @id @default(cuid())
  userId                String   // Team member being reviewed
  reviewerId            String?  // Who conducted the review
  projectId             String?  // Project context (if applicable)
  period                String   // MONTHLY, QUARTERLY, ANNUAL
  startDate             DateTime
  endDate               DateTime
  performanceScore      Float    // 0-100 overall performance
  productivityScore     Float    // 0-100 productivity score
  qualityScore          Float    // 0-100 quality score
  collaborationScore    Float    // 0-100 collaboration score
  strengths             String[] // Identified strengths
  improvementAreas      String[] // Areas for improvement
  goals                 Json?    // Performance goals
  feedback              String?  // Textual feedback
  actionItems           Json?    // Action items
  tenantId              String
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  user      User     @relation("TeamPerformanceReviews", fields: [userId], references: [id])
  reviewer  User?    @relation("TeamPerformanceReviewers", fields: [reviewerId], references: [id])
  project   Project? @relation(fields: [projectId], references: [id])
  tenant    Tenant   @relation(fields: [tenantId], references: [id])

  @@unique([userId, period, startDate])
  @@index([tenantId, userId, startDate])
  @@map("team_performance_reviews")
}

model ProjectInsightQuery {
  id                    String   @id @default(cuid())
  query                 String   // Natural language query
  queryType             String   // PERFORMANCE, PREDICTION, COMPARISON, etc.
  projectIds            String[] // Projects in scope
  response              Json     // AI-generated response
  confidence            Float    // 0-1 confidence in response
  processingTime        Float    // Query processing time in seconds
  tenantId              String
  userId                String
  createdAt             DateTime @default(now())

  tenant Tenant @relation(fields: [tenantId], references: [id])
  user   User   @relation("ProjectInsightQueries", fields: [userId], references: [id])

  @@index([tenantId, userId, createdAt])
  @@map("project_insight_queries")
}

model TaskPerformanceMetrics {
  id                    String   @id @default(cuid())
  taskId                String
  metricType            String   // COMPLETION_TIME, QUALITY_SCORE, EFFORT_VARIANCE, etc.
  value                 Float
  target                Float?
  calculatedAt          DateTime
  metadata              Json?
  tenantId              String
  createdAt             DateTime @default(now())

  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  tenant Tenant @relation(fields: [tenantId], references: [id])

  @@unique([taskId, metricType, calculatedAt])
  @@index([tenantId, taskId])
  @@map("task_performance_metrics")
}

// SPRINT 2.8 - KI-AUTONOMIE VERBESSERUNGEN
// Multi-Agent AI System
model AIAgent {
  id                String   @id @default(cuid())
  name              String
  type              AIAgentType // COORDINATOR, SPECIALIST, MONITOR, OPTIMIZER
  capabilities      String[] // List of capabilities
  status            AIAgentStatus @default(IDLE)
  configuration     Json     // Agent configuration
  lastActivity      DateTime?
  performanceMetrics Json?   // Performance data
  tenantId          String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  tenant               Tenant               @relation(fields: [tenantId], references: [id])
  tasks                AIAgentTask[]
  communications       AIAgentCommunication[]
  decisions            AutonomousDecision[]

  @@index([tenantId, type, status])
  @@map("ai_agents")
}

model AIAgentTask {
  id                String   @id @default(cuid())
  agentId           String
  taskType          String   // ANALYSIS, PREDICTION, OPTIMIZATION, MONITORING
  payload           Json     // Task data
  status            TaskStatus @default(TODO)
  priority          TaskPriority @default(MEDIUM)
  startedAt         DateTime?
  completedAt       DateTime?
  result            Json?
  errorMessage      String?
  retryCount        Int      @default(0)
  maxRetries        Int      @default(3)
  tenantId          String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  agent  AIAgent @relation(fields: [agentId], references: [id], onDelete: Cascade)
  tenant Tenant  @relation(fields: [tenantId], references: [id])

  @@index([tenantId, agentId, status])
  @@index([priority, status])
  @@map("ai_agent_tasks")
}

model AIAgentCommunication {
  id                String   @id @default(cuid())
  fromAgentId       String
  toAgentId         String?  // null for broadcast
  messageType       String   // REQUEST, RESPONSE, NOTIFICATION, BROADCAST
  content           Json
  status            String   @default("SENT") // SENT, DELIVERED, PROCESSED, FAILED
  responseToId      String?  // Reference to original message
  tenantId          String
  createdAt         DateTime @default(now())

  fromAgent  AIAgent  @relation(fields: [fromAgentId], references: [id])
  tenant     Tenant   @relation(fields: [tenantId], references: [id])

  @@index([tenantId, fromAgentId, createdAt])
  @@map("ai_agent_communications")
}

// Autonomous Decision System
model AutonomousDecision {
  id                String   @id @default(cuid())
  agentId           String?
  decisionType      String   // RESOURCE_ALLOCATION, TASK_PRIORITY, SYSTEM_OPTIMIZATION
  context           Json     // Decision context
  options           Json     // Available options
  selectedOption    Json     // Chosen option
  confidence        Float    // 0-1 confidence score
  reasoning         String   // AI reasoning
  outcome           Json?    // Actual outcome
  feedback          Float?   // -1 to 1 feedback score
  isReversible      Boolean  @default(true)
  reversedAt        DateTime?
  tenantId          String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  agent  AIAgent? @relation(fields: [agentId], references: [id])
  tenant Tenant   @relation(fields: [tenantId], references: [id])

  @@index([tenantId, decisionType, createdAt])
  @@map("autonomous_decisions")
}

// TensorFlow.js Models
model ClientMLModel {
  id                String   @id @default(cuid())
  name              String
  version           String
  modelType         String   // CLASSIFICATION, REGRESSION, CLUSTERING, NLP
  framework         String   @default("tensorflowjs") // tensorflowjs, brainjs
  modelData         Json     // Serialized model
  trainingData      Json?    // Training metadata
  performance       Json?    // Model performance metrics
  isActive          Boolean  @default(false)
  downloadCount     Int      @default(0)
  size              Int      // Model size in bytes
  tenantId          String
  userId            String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  tenant       Tenant              @relation(fields: [tenantId], references: [id])
  user         User                @relation(fields: [userId], references: [id])
  predictions  ClientMLPrediction[]

  @@unique([tenantId, name, version])
  @@index([tenantId, modelType, isActive])
  @@map("client_ml_models")
}

model ClientMLPrediction {
  id                String   @id @default(cuid())
  modelId           String
  inputData         Json
  prediction        Json
  confidence        Float?   // 0-1 confidence score
  processingTime    Float    // Milliseconds
  accuracy          Float?   // If ground truth available
  tenantId          String
  userId            String
  createdAt         DateTime @default(now())

  model  ClientMLModel @relation(fields: [modelId], references: [id], onDelete: Cascade)
  tenant Tenant        @relation(fields: [tenantId], references: [id])
  user   User          @relation(fields: [userId], references: [id])

  @@index([tenantId, modelId, createdAt])
  @@map("client_ml_predictions")
}

// Advanced NLP System
model NLPProcessor {
  id                String   @id @default(cuid())
  name              String
  processorType     String   // SENTIMENT, ENTITY, INTENT, TOPIC, TRANSLATION
  language          String   @default("en")
  configuration     Json
  isActive          Boolean  @default(true)
  performance       Json?    // Accuracy, speed metrics
  tenantId          String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  tenant    Tenant            @relation(fields: [tenantId], references: [id])
  queries   NLPQuery[]

  @@index([tenantId, processorType, isActive])
  @@map("nlp_processors")
}

model NLPQuery {
  id                String   @id @default(cuid())
  processorId       String
  inputText         String   @db.Text
  processedResult   Json
  confidence        Float?   // 0-1 confidence
  processingTime    Float    // Milliseconds
  language          String?  // Detected language
  metadata          Json?    // Additional context
  tenantId          String
  userId            String
  createdAt         DateTime @default(now())

  processor NLPProcessor @relation(fields: [processorId], references: [id], onDelete: Cascade)
  tenant    Tenant       @relation(fields: [tenantId], references: [id])
  user      User         @relation(fields: [userId], references: [id])

  @@index([tenantId, processorId, createdAt])
  @@map("nlp_queries")
}

// Self-Healing System
model SystemHealth {
  id                String   @id @default(cuid())
  component         String   // DATABASE, API, ML_PIPELINE, CACHE, etc.
  healthScore       Float    // 0-100 health score
  status            SystemStatus @default(HEALTHY) // HEALTHY, WARNING, CRITICAL, DOWN
  metrics           Json     // Detailed metrics
  issues            Json?    // Identified issues
  autoHealing       Boolean  @default(true)
  lastHealed        DateTime?
  healingActions    Json?    // Applied healing actions
  tenantId          String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  tenant      Tenant             @relation(fields: [tenantId], references: [id])
  incidents   SystemIncident[]

  @@index([tenantId, component, status])
  @@map("system_health")
}

model SystemIncident {
  id                String   @id @default(cuid())
  healthId          String
  severity          IncidentSeverity // LOW, MEDIUM, HIGH, CRITICAL
  title             String
  description       String   @db.Text
  status            IncidentStatus @default(OPEN) // OPEN, INVESTIGATING, RESOLVED, CLOSED
  detectedAt        DateTime
  resolvedAt        DateTime?
  autoResolved      Boolean  @default(false)
  resolutionActions Json?    // Actions taken
  impactedUsers     Int?     // Number of affected users
  downtime          Int?     // Downtime in minutes
  tenantId          String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  systemHealth SystemHealth @relation(fields: [healthId], references: [id], onDelete: Cascade)
  tenant       Tenant       @relation(fields: [tenantId], references: [id])

  @@index([tenantId, severity, status])
  @@index([detectedAt, severity])
  @@map("system_incidents")
}

// Voice Command System
model VoiceCommand {
  id                String   @id @default(cuid())
  command           String
  intent            String   // NAVIGATE, SEARCH, CREATE, UPDATE, DELETE
  parameters        Json?    // Extracted parameters
  confidence        Float    // 0-1 confidence
  response          String?  // System response
  status            String   @default("PROCESSED") // PROCESSED, FAILED, PARTIAL
  executionTime     Float    // Milliseconds
  language          String   @default("en")
  tenantId          String
  userId            String
  createdAt         DateTime @default(now())

  tenant Tenant @relation(fields: [tenantId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@index([tenantId, userId, createdAt])
  @@index([intent, confidence])
  @@map("voice_commands")
}

// SPRINT 2.9 - BEST-IN-CLASS ENHANCEMENT
// Advanced Security System
model MFADevice {
  id                String   @id @default(cuid())
  userId            String
  deviceType        MFADeviceType // TOTP, SMS, EMAIL, HARDWARE_TOKEN
  deviceName        String
  secret            String?  // For TOTP
  phoneNumber       String?  // For SMS
  emailAddress      String?  // For Email
  isActive          Boolean  @default(true)
  isVerified        Boolean  @default(false)
  backupCodes       String[] // Backup recovery codes
  lastUsed          DateTime?
  failedAttempts    Int      @default(0)
  tenantId          String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant Tenant @relation(fields: [tenantId], references: [id])

  @@index([userId, isActive])
  @@map("mfa_devices")
}

model SecurityLog {
  id                String   @id @default(cuid())
  userId            String?
  eventType         SecurityEventType // LOGIN, LOGOUT, MFA_SUCCESS, MFA_FAILURE, etc.
  ipAddress         String
  userAgent         String?
  location          Json?    // Geolocation data
  riskScore         Float    // 0-100 risk assessment
  status            SecurityStatus @default(SUCCESS) // SUCCESS, FAILURE, BLOCKED
  details           Json?
  tenantId          String
  createdAt         DateTime @default(now())

  user   User?  @relation(fields: [userId], references: [id])
  tenant Tenant @relation(fields: [tenantId], references: [id])

  @@index([userId, eventType, createdAt])
  @@index([tenantId, riskScore, createdAt])
  @@map("security_logs")
}

model ZeroTrustPolicy {
  id                String   @id @default(cuid())
  name              String
  description       String?
  ruleType          String   // DEVICE, LOCATION, TIME, BEHAVIOR
  conditions        Json     // Policy conditions
  action            String   // ALLOW, DENY, REQUIRE_MFA, MONITOR
  priority          Int      @default(0)
  isActive          Boolean  @default(true)
  appliedCount      Int      @default(0)
  tenantId          String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  tenant Tenant @relation(fields: [tenantId], references: [id])

  @@index([tenantId, isActive, priority])
  @@map("zero_trust_policies")
}

// Performance Optimization System
model CacheEntry {
  id                String   @id @default(cuid())
  key               String   @unique
  value             Json
  ttl               Int      // Time to live in seconds
  tags              String[] // Cache tags for invalidation
  hitCount          Int      @default(0)
  lastAccessed      DateTime @default(now())
  tenantId          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  tenant Tenant? @relation(fields: [tenantId], references: [id])

  @@index([tenantId, tags])
  @@index([ttl, createdAt])
  @@map("cache_entries")
}

model QueryOptimization {
  id                String   @id @default(cuid())
  queryHash         String   @unique
  originalQuery     String   @db.Text
  optimizedQuery    String?  @db.Text
  executionTime     Float    // Original execution time
  optimizedTime     Float?   // Optimized execution time
  improvement       Float?   // Performance improvement percentage
  isActive          Boolean  @default(false)
  usage             Int      @default(0)
  tenantId          String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  tenant Tenant @relation(fields: [tenantId], references: [id])

  @@index([tenantId, improvement])
  @@map("query_optimizations")
}

// PWA System
model PWAInstallation {
  id                String   @id @default(cuid())
  userId            String
  deviceType        String   // MOBILE, DESKTOP, TABLET
  platform          String   // ANDROID, IOS, WINDOWS, MACOS, LINUX
  browser           String
  version           String
  isActive          Boolean  @default(true)
  lastSync          DateTime?
  offlineCapable    Boolean  @default(true)
  pushEnabled       Boolean  @default(false)
  tenantId          String
  installedAt       DateTime @default(now())
  lastAccessed      DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant Tenant @relation(fields: [tenantId], references: [id])

  @@index([userId, isActive])
  @@map("pwa_installations")
}

model PushNotification {
  id                String   @id @default(cuid())
  userId            String
  title             String
  body              String
  icon              String?
  badge             String?
  data              Json?
  status            NotificationStatus @default(PENDING) // PENDING, SENT, DELIVERED, FAILED
  sentAt            DateTime?
  deliveredAt       DateTime?
  clickedAt         DateTime?
  tenantId          String
  createdAt         DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant Tenant @relation(fields: [tenantId], references: [id])

  @@index([userId, status, createdAt])
  @@map("push_notifications")
}

// GraphQL API System
model GraphQLSchema {
  id                String   @id @default(cuid())
  version           String
  schema            String   @db.Text
  isActive          Boolean  @default(false)
  deprecationReason String?
  tenantId          String
  createdAt         DateTime @default(now())

  tenant  Tenant           @relation(fields: [tenantId], references: [id])
  queries GraphQLQuery[]

  @@unique([tenantId, version])
  @@map("graphql_schemas")
}

model GraphQLQuery {
  id                String   @id @default(cuid())
  schemaId          String
  query             String   @db.Text
  variables         Json?
  operationName     String?
  executionTime     Float    // Milliseconds
  complexity        Int?     // Query complexity score
  cacheHit          Boolean  @default(false)
  errors            Json?
  userId            String?
  tenantId          String
  createdAt         DateTime @default(now())

  schema GraphQLSchema @relation(fields: [schemaId], references: [id], onDelete: Cascade)
  user   User?        @relation(fields: [userId], references: [id])
  tenant Tenant       @relation(fields: [tenantId], references: [id])

  @@index([tenantId, schemaId, createdAt])
  @@index([complexity, executionTime])
  @@map("graphql_queries")
}

// Enterprise Multi-tenancy
model TenantConfiguration {
  id                String   @id @default(cuid())
  tenantId          String   @unique
  brandingConfig    Json?    // Logo, colors, theme
  featureFlags      Json     // Enabled features
  limits            Json     // Usage limits
  customDomain      String?
  sslEnabled        Boolean  @default(true)
  whiteLabel        Boolean  @default(false)
  apiRateLimit      Int      @default(1000) // Requests per hour
  storageLimit      BigInt   @default(5368709120) // 5GB in bytes
  userLimit         Int      @default(100)
  backupFrequency   String   @default("DAILY") // HOURLY, DAILY, WEEKLY
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("tenant_configurations")
}

model BackupJob {
  id                String   @id @default(cuid())
  tenantId          String
  backupType        BackupType // FULL, INCREMENTAL, DIFFERENTIAL
  status            BackupStatus @default(SCHEDULED) // SCHEDULED, RUNNING, COMPLETED, FAILED
  startedAt         DateTime?
  completedAt       DateTime?
  size              BigInt?  // Backup size in bytes
  location          String?  // Backup storage location
  errorMessage      String?
  retentionDays     Int      @default(30)
  createdAt         DateTime @default(now())

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId, status, createdAt])
  @@map("backup_jobs")
}

// API Excellence System

model APIVersion {
  id                String   @id @default(cuid())
  version           String   @unique
  isActive          Boolean  @default(true)
  isDeprecated      Boolean  @default(false)
  deprecationDate   DateTime?
  endOfLifeDate     DateTime?
  changelog         String?  @db.Text
  documentation     String?  @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("api_versions")
}

// =============================================================================
// MULTI-TENANT SYSTEM MODELS
// =============================================================================

// Junction table for Many-to-Many relationship between Users and Tenants
model UserTenant {
  id          String   @id @default(cuid())
  userId      String
  tenantId    String
  role        UserRole @default(USER)
  isActive    Boolean  @default(true)
  isPrimary   Boolean  @default(false) // Primary tenant for user
  joinedAt    DateTime @default(now())
  leftAt      DateTime?
  invitedBy   String?  // User ID who invited this user
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  permissions UserTenantPermission[]

  @@unique([userId, tenantId])
  @@index([tenantId, isActive])
  @@index([userId, isPrimary])
  @@map("user_tenants")
}

// Permission system
model Permission {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  module      String   // FINANCE, ANALYTICS, PROJECTS, etc.
  action      String   // CREATE, READ, UPDATE, DELETE, EXPORT, etc.
  resource    String?  // Specific resource within module
  isSystem    Boolean  @default(false) // System permissions cannot be deleted
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userPermissions       UserPermission[]
  userTenantPermissions UserTenantPermission[]
  rolePermissions       RolePermission[]

  @@unique([module, action, resource])
  @@map("permissions")
}

// User-specific permissions (global across all tenants)
model UserPermission {
  id           String   @id @default(cuid())
  userId       String
  permissionId String
  isGranted    Boolean  @default(true)
  grantedBy    String?  // User ID who granted this permission
  grantedAt    DateTime @default(now())
  expiresAt    DateTime?

  // Relations
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([userId, permissionId])
  @@map("user_permissions")
}

// User permissions within specific tenant context
model UserTenantPermission {
  id           String   @id @default(cuid())
  userTenantId String
  permissionId String
  isGranted    Boolean  @default(true)
  grantedBy    String?  // User ID who granted this permission
  grantedAt    DateTime @default(now())
  expiresAt    DateTime?

  // Relations
  userTenant UserTenant @relation(fields: [userTenantId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([userTenantId, permissionId])
  @@map("user_tenant_permissions")
}

// Role-based permissions (template for assigning permissions to roles)
model RolePermission {
  id           String   @id @default(cuid())
  role         UserRole
  permissionId String
  isDefault    Boolean  @default(true) // Auto-granted to users with this role
  createdAt    DateTime @default(now())

  // Relations
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([role, permissionId])
  @@map("role_permissions")
}

// Tenant configurations and settings
model TenantSetting {
  id        String   @id @default(cuid())
  tenantId  String
  category  String   // BRANDING, SECURITY, FEATURES, etc.
  key       String
  value     String?  @db.Text
  dataType  String   @default("STRING") // STRING, NUMBER, BOOLEAN, JSON
  isEncrypted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, category, key])
  @@map("tenant_settings")
}

// Tenant invitation system
model TenantInvitation {
  id        String             @id @default(cuid())
  email     String
  tenantId  String
  role      UserRole           @default(USER)
  invitedBy String
  token     String             @unique
  status    TenantInvitationStatus @default(PENDING)
  expiresAt DateTime
  acceptedAt DateTime?
  createdAt DateTime           @default(now())

  // Relations
  tenant    Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  inviter   User   @relation("TenantInvitations", fields: [invitedBy], references: [id])

  @@index([email, status])
  @@map("tenant_invitations")
}

// =============================================================================
// MULTI-TENANT ENUMS
// =============================================================================

enum TenantInvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
  CANCELLED
}

// =============================================================================
// SPRINT 3.0 - CRM & HR ENUMS
// =============================================================================

// CRM Enums
enum ContactSourceType {
  WEBSITE
  REFERRAL
  SOCIAL_MEDIA
  EMAIL_CAMPAIGN
  PHONE_CALL
  TRADE_SHOW
  ADVERTISING
  PARTNER
  COLD_OUTREACH
  OTHER
}

enum OpportunityStage {
  PROSPECTING
  QUALIFICATION
  NEEDS_ANALYSIS
  VALUE_PROPOSITION
  PROPOSAL
  NEGOTIATION
  CLOSING
  CLOSED_WON
  CLOSED_LOST
}

enum DealStatus {
  OPEN
  WON
  LOST
  CANCELLED
  ON_HOLD
}

enum CrmActivityType {
  CALL
  EMAIL
  MEETING
  TASK
  NOTE
  APPOINTMENT
  DEMO
  PROPOSAL_SENT
  FOLLOW_UP
  QUOTE
}

enum CrmActivityStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  OVERDUE
}

enum LeadQuality {
  HOT
  WARM
  COLD
  UNQUALIFIED
}

enum OpportunityProbability {
  VERY_LOW    // 0-20%
  LOW         // 21-40%
  MEDIUM      // 41-60%
  HIGH        // 61-80%
  VERY_HIGH   // 81-100%
}

// HR Enums
enum EmployeeStatus {
  ACTIVE
  INACTIVE
  ON_LEAVE
  TERMINATED
  RESIGNED
  RETIRED
  PROBATION
}

enum DepartmentType {
  EXECUTIVE
  HUMAN_RESOURCES
  FINANCE
  SALES
  MARKETING
  ENGINEERING
  OPERATIONS
  CUSTOMER_SUPPORT
  LEGAL
  IT
  RESEARCH_DEVELOPMENT
  QUALITY_ASSURANCE
  OTHER
}

enum PositionLevel {
  ENTRY_LEVEL
  JUNIOR
  MID_LEVEL
  SENIOR
  LEAD
  PRINCIPAL
  MANAGER
  SENIOR_MANAGER
  DIRECTOR
  VP
  C_LEVEL
  EXECUTIVE
}

enum PerformanceRating {
  EXCEEDS_EXPECTATIONS
  MEETS_EXPECTATIONS
  BELOW_EXPECTATIONS
  UNSATISFACTORY
  NOT_RATED
}

enum LeaveType {
  VACATION
  SICK_LEAVE
  PERSONAL_LEAVE
  MATERNITY_LEAVE
  PATERNITY_LEAVE
  BEREAVEMENT_LEAVE
  JURY_DUTY
  MILITARY_LEAVE
  SABBATICAL
  UNPAID_LEAVE
  OTHER
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
  IN_PROGRESS
  COMPLETED
}

enum PayrollStatus {
  DRAFT
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACT
  FREELANCE
  INTERN
  TEMPORARY
  CONSULTANT
}

// =============================================================================
// SPRINT 3.0 - CRM MODELS
// =============================================================================

// Extended Contact model for CRM
model Contact {
  id            String            @id @default(cuid())
  firstName     String
  lastName      String
  fullName      String?           // Computed field
  email         String?
  phone         String?
  mobile        String?
  title         String?           // Job title
  department    String?
  companyName   String?
  address       String?
  city          String?
  state         String?
  postalCode    String?
  country       String?
  website       String?
  linkedinUrl   String?
  source        ContactSourceType @default(OTHER)
  notes         String?           @db.Text
  tags          Json?             // Array of tags
  isActive      Boolean           @default(true)
  customFields  Json?             // Custom field data
  
  // Relations
  customerId    String?
  ownerId       String?           // Sales rep who owns this contact
  tenantId      String
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  // Relationships
  customer      Customer?         @relation(fields: [customerId], references: [id])
  owner         User?             @relation("ContactOwner", fields: [ownerId], references: [id])
  tenant        Tenant            @relation(fields: [tenantId], references: [id])
  
  // Related CRM entities
  opportunities Opportunity[]     @relation("ContactOpportunities")
  activities    CrmActivity[]     @relation("ContactActivities")
  deals         Deal[]            @relation("ContactDeals")

  @@index([tenantId, email])
  @@index([tenantId, companyName])
  @@index([ownerId, tenantId])
  @@map("contacts")
}

// Sales Opportunities
model Opportunity {
  id              String                @id @default(cuid())
  name            String
  description     String?               @db.Text
  stage           OpportunityStage      @default(PROSPECTING)
  probability     OpportunityProbability @default(LOW)
  amount          Float?                // Expected deal value
  currency        String                @default("EUR")
  expectedCloseDate DateTime?
  actualCloseDate DateTime?
  source          ContactSourceType     @default(OTHER)
  competitors     Json?                 // Array of competitor names
  nextSteps       String?               @db.Text
  lossReason      String?               // If lost, why?
  tags            Json?                 // Array of tags
  customFields    Json?                 // Custom field data
  
  // Relations
  customerId      String?
  contactId       String?
  ownerId         String?               // Sales rep who owns this opportunity
  tenantId        String
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt

  // Relationships
  customer        Customer?             @relation(fields: [customerId], references: [id])
  contact         Contact?              @relation("ContactOpportunities", fields: [contactId], references: [id])
  owner           User?                 @relation("OpportunityOwner", fields: [ownerId], references: [id])
  tenant          Tenant                @relation(fields: [tenantId], references: [id])
  
  // Related entities
  activities      CrmActivity[]         @relation("OpportunityActivities")
  deals           Deal[]                @relation("OpportunityDeals")

  @@index([tenantId, stage])
  @@index([ownerId, tenantId])
  @@index([expectedCloseDate, tenantId])
  @@map("opportunities")
}

// Deals (Closed opportunities)
model Deal {
  id              String        @id @default(cuid())
  name            String
  description     String?       @db.Text
  status          DealStatus    @default(OPEN)
  amount          Float
  currency        String        @default("EUR")
  closedDate      DateTime?
  margin          Float?        // Profit margin
  commission      Float?        // Sales commission
  tags            Json?         // Array of tags
  terms           String?       @db.Text
  notes           String?       @db.Text
  customFields    Json?         // Custom field data
  
  // Relations
  opportunityId   String?
  customerId      String?
  contactId       String?
  ownerId         String?       // Sales rep who owns this deal
  tenantId        String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relationships
  opportunity     Opportunity?  @relation("OpportunityDeals", fields: [opportunityId], references: [id])
  customer        Customer?     @relation(fields: [customerId], references: [id])
  contact         Contact?      @relation("ContactDeals", fields: [contactId], references: [id])
  owner           User?         @relation("DealOwner", fields: [ownerId], references: [id])
  tenant          Tenant        @relation(fields: [tenantId], references: [id])
  
  // Related entities
  activities      CrmActivity[] @relation("DealActivities")

  @@index([tenantId, status])
  @@index([ownerId, tenantId])
  @@index([closedDate, tenantId])
  @@map("deals")
}

// CRM Activities (calls, emails, meetings, tasks)
model CrmActivity {
  id              String            @id @default(cuid())
  subject         String
  description     String?           @db.Text
  type            CrmActivityType   @default(TASK)
  status          CrmActivityStatus @default(SCHEDULED)
  priority        TaskPriority      @default(MEDIUM)
  dueDate         DateTime?
  completedDate   DateTime?
  duration        Int?              // Duration in minutes
  outcome         String?           @db.Text
  tags            Json?             // Array of tags
  attachments     Json?             // Array of file URLs
  customFields    Json?             // Custom field data
  
  // Relations
  customerId      String?
  contactId       String?
  opportunityId   String?
  dealId          String?
  assignedUserId  String?           // Who is responsible
  createdById     String            // Who created this activity
  tenantId        String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  // Relationships
  customer        Customer?         @relation(fields: [customerId], references: [id])
  contact         Contact?          @relation("ContactActivities", fields: [contactId], references: [id])
  opportunity     Opportunity?      @relation("OpportunityActivities", fields: [opportunityId], references: [id])
  deal            Deal?             @relation("DealActivities", fields: [dealId], references: [id])
  assignedUser    User?             @relation("CrmActivityAssigned", fields: [assignedUserId], references: [id])
  createdBy       User              @relation("CrmActivityCreated", fields: [createdById], references: [id])
  tenant          Tenant            @relation(fields: [tenantId], references: [id])

  @@index([tenantId, type, status])
  @@index([assignedUserId, dueDate])
  @@index([tenantId, dueDate])
  @@map("crm_activities")
}

// =============================================================================
// SPRINT 3.0 - HR MODELS
// =============================================================================

// Employee model
model Employee {
  id              String          @id @default(cuid())
  employeeNumber  String?         @unique
  userId          String?         @unique // Link to User account if they have system access
  firstName       String
  lastName        String
  fullName        String?         // Computed field
  email           String          @unique
  phone           String?
  mobile          String?
  birthDate       DateTime?
  hireDate        DateTime
  terminationDate DateTime?
  status          EmployeeStatus  @default(ACTIVE)
  employmentType  EmploymentType  @default(FULL_TIME)
  
  // Address information
  address         String?
  city            String?
  state           String?
  postalCode      String?
  country         String?
  
  // Emergency contact
  emergencyContactName  String?
  emergencyContactPhone String?
  emergencyContactRelation String?
  
  // Personal information
  nationalId      String?         // SSN, ID number, etc.
  passport        String?
  bankAccount     String?
  taxId           String?
  notes           String?         @db.Text
  customFields    Json?           // Custom field data
  
  // Relations
  departmentId    String?
  positionId      String?
  managerId       String?         // Direct manager
  tenantId        String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  // Relationships
  user            User?           @relation("EmployeeUser", fields: [userId], references: [id])
  department      Department?     @relation(fields: [departmentId], references: [id])
  position        Position?       @relation(fields: [positionId], references: [id])
  manager         Employee?       @relation("EmployeeManager", fields: [managerId], references: [id])
  directReports   Employee[]      @relation("EmployeeManager")
  tenant          Tenant          @relation(fields: [tenantId], references: [id])
  
  // Related HR entities
  performanceReviews Performance[] @relation("EmployeePerformance")
  leaveRequests      Leave[]       @relation("EmployeeLeave")
  payrollRecords     Payroll[]     @relation("EmployeePayroll")
  
  // Management relations
  managedDepartments Department[]  @relation("DepartmentManager")
  conductedReviews   Performance[] @relation("PerformanceReviewer")
  approvedLeaves     Leave[]       @relation("LeaveApprover")
  processedPayrolls  Payroll[]     @relation("PayrollProcessor")

  @@index([tenantId, status])
  @@index([departmentId, tenantId])
  @@index([managerId, tenantId])
  @@index([email, tenantId])
  @@map("employees")
}

// Department model
model Department {
  id          String         @id @default(cuid())
  name        String
  code        String?        // Department code (e.g., "HR", "ENG")
  type        DepartmentType @default(OTHER)
  description String?        @db.Text
  budget      Float?         // Department budget
  headCount   Int?           // Target headcount
  isActive    Boolean        @default(true)
  
  // Relations
  managerId   String?        // Department head
  parentId    String?        // Parent department for hierarchies
  tenantId    String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relationships
  manager     Employee?      @relation("DepartmentManager", fields: [managerId], references: [id])
  parent      Department?    @relation("DepartmentHierarchy", fields: [parentId], references: [id])
  children    Department[]   @relation("DepartmentHierarchy")
  tenant      Tenant         @relation(fields: [tenantId], references: [id])
  
  // Related entities
  employees   Employee[]
  positions   Position[]

  @@unique([name, tenantId])
  @@index([tenantId, isActive])
  @@index([parentId, tenantId])
  @@map("departments")
}

// Position/Job Title model
model Position {
  id              String        @id @default(cuid())
  title           String
  code            String?       // Position code
  level           PositionLevel @default(ENTRY_LEVEL)
  description     String?       @db.Text
  requirements    String?       @db.Text
  responsibilities String?      @db.Text
  salaryMin       Float?
  salaryMax       Float?
  currency        String        @default("EUR")
  isActive        Boolean       @default(true)
  
  // Relations
  departmentId    String?
  tenantId        String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relationships
  department      Department?   @relation(fields: [departmentId], references: [id])
  tenant          Tenant        @relation(fields: [tenantId], references: [id])
  
  // Related entities
  employees       Employee[]

  @@unique([title, departmentId, tenantId])
  @@index([tenantId, isActive])
  @@index([departmentId, tenantId])
  @@map("positions")
}

// Performance Review model
model Performance {
  id              String            @id @default(cuid())
  reviewPeriod    String            // e.g., "Q1 2024", "Annual 2024"
  startDate       DateTime
  endDate         DateTime
  status          String            @default("DRAFT") // DRAFT, SUBMITTED, APPROVED
  overallRating   PerformanceRating @default(NOT_RATED)
  goals           Json?             // Array of goals and achievements
  feedback        String?           @db.Text
  improvements    String?           @db.Text
  strengths       String?           @db.Text
  nextSteps       String?           @db.Text
  managerComments String?           @db.Text
  employeeComments String?          @db.Text
  
  // Relations
  employeeId      String
  reviewerId      String            // Manager conducting review
  tenantId        String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  // Relationships
  employee        Employee          @relation("EmployeePerformance", fields: [employeeId], references: [id])
  reviewer        Employee          @relation("PerformanceReviewer", fields: [reviewerId], references: [id])
  tenant          Tenant            @relation(fields: [tenantId], references: [id])

  @@index([employeeId, reviewPeriod])
  @@index([tenantId, reviewPeriod])
  @@map("performance_reviews")
}

// Leave Management model
model Leave {
  id            String      @id @default(cuid())
  type          LeaveType   @default(VACATION)
  status        LeaveStatus @default(PENDING)
  startDate     DateTime
  endDate       DateTime
  totalDays     Float       // Total days requested
  reason        String?     @db.Text
  approvedDays  Float?      // Days actually approved
  denialReason  String?     // If rejected, why?
  
  // Relations
  employeeId    String
  approverId    String?     // Manager who approved/denied
  tenantId      String
  requestedAt   DateTime    @default(now())
  approvedAt    DateTime?
  updatedAt     DateTime    @updatedAt

  // Relationships
  employee      Employee    @relation("EmployeeLeave", fields: [employeeId], references: [id])
  approver      Employee?   @relation("LeaveApprover", fields: [approverId], references: [id])
  tenant        Tenant      @relation(fields: [tenantId], references: [id])

  @@index([employeeId, status])
  @@index([tenantId, startDate, endDate])
  @@index([status, tenantId])
  @@map("leave_requests")
}

// Payroll model
model Payroll {
  id              String        @id @default(cuid())
  payPeriodStart  DateTime
  payPeriodEnd    DateTime
  payDate         DateTime
  status          PayrollStatus @default(DRAFT)
  baseSalary      Float
  overtime        Float         @default(0)
  bonuses         Float         @default(0)
  deductions      Float         @default(0)
  taxes           Float         @default(0)
  netPay          Float
  currency        String        @default("EUR")
  notes           String?       @db.Text
  
  // Relations
  employeeId      String
  processedById   String?       // HR who processed this payroll
  tenantId        String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relationships
  employee        Employee      @relation("EmployeePayroll", fields: [employeeId], references: [id])
  processedBy     Employee?     @relation("PayrollProcessor", fields: [processedById], references: [id])
  tenant          Tenant        @relation(fields: [tenantId], references: [id])

  @@index([employeeId, payPeriodStart])
  @@index([tenantId, payDate])
  @@index([status, tenantId])
  @@map("payroll_records")
}

// =============================================================================
// SPRINT 3.2 - CREATE MODULE MODELS
// =============================================================================

model ContentTemplate {
  id          String   @id @default(cuid())
  name        String
  category    String   // document, design, video, audio, presentation
  type        String   // template, layout, style, component
  content     Json     // template structure/data
  metadata    Json?    // creation settings, dimensions, etc.
  thumbnailUrl String? // Preview image
  tags        String[] // For categorization and search
  isActive    Boolean  @default(true)
  isPublic    Boolean  @default(false) // Can be shared across tenants
  downloads   Int      @default(0)     // Usage tracking
  rating      Float?   // Average user rating
  tenantId    String
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  tenant      Tenant           @relation(fields: [tenantId], references: [id])
  creator     User             @relation("ContentTemplateCreator", fields: [createdBy], references: [id])
  projects    ContentProject[]

  @@index([tenantId, category])
  @@index([category, type])
  @@index([isActive, isPublic])
  @@map("content_templates")
}

model ContentProject {
  id            String         @id @default(cuid())
  title         String
  description   String?        @db.Text
  category      String         // document, design, video, audio, presentation, website
  status        ContentStatus  @default(DRAFT)
  content       Json           // project content/structure
  metadata      Json?          // creation metadata (dimensions, settings, etc.)
  aiGenerated   Boolean        @default(false)
  aiPrompt      String?        @db.Text // Original AI prompt if AI-generated
  templateId    String?
  previewUrl    String?        // Preview/thumbnail image
  exportedUrl   String?        // Final exported file URL
  wordCount     Int?           // For text content
  duration      Int?           // For video/audio content (in seconds)
  fileSize      Int?           // In bytes
  tags          String[]       // Project tags
  isPublic      Boolean        @default(false)
  publishedUrl  String?        // If published online
  tenantId      String
  createdBy     String
  assignedTo    String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  publishedAt   DateTime?
  completedAt   DateTime?
  
  // Relations
  tenant        Tenant         @relation(fields: [tenantId], references: [id])
  creator       User           @relation("ContentProjectCreator", fields: [createdBy], references: [id])
  assignee      User?          @relation("AssignedContentProjects", fields: [assignedTo], references: [id])
  template      ContentTemplate? @relation(fields: [templateId], references: [id])
  assets        ContentAsset[]
  versions      ContentVersion[]

  @@index([tenantId, status])
  @@index([createdBy, status])
  @@index([category, status])
  @@index([createdAt])
  @@map("content_projects")
}

model ContentAsset {
  id          String   @id @default(cuid())
  projectId   String
  name        String
  fileName    String
  type        String   // image, video, audio, document, font, icon
  url         String   // CDN URL
  size        Int?     // File size in bytes
  mimeType    String?
  dimensions  Json?    // width, height for images/videos
  duration    Int?     // For audio/video in seconds
  metadata    Json?    // EXIF data, creation settings, etc.
  aiGenerated Boolean  @default(false)
  aiPrompt    String?  @db.Text
  tags        String[] // Asset tags
  isPublic    Boolean  @default(false)
  tenantId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  project     ContentProject @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tenant      Tenant         @relation(fields: [tenantId], references: [id])

  @@index([projectId])
  @@index([type, tenantId])
  @@map("content_assets")
}

model ContentVersion {
  id          String   @id @default(cuid())
  projectId   String
  version     String   // 1.0, 1.1, 2.0, etc.
  title       String?
  content     Json     // Complete project content at this version
  changes     String?  @db.Text // Description of changes
  fileUrl     String?  // Exported file for this version
  fileSize    Int?
  metadata    Json?    // Version-specific metadata
  isActive    Boolean  @default(false) // Current active version
  createdBy   String
  createdAt   DateTime @default(now())
  
  // Relations
  project     ContentProject @relation(fields: [projectId], references: [id], onDelete: Cascade)
  creator     User           @relation("ContentVersionCreator", fields: [createdBy], references: [id])
  tenant      Tenant         @relation(fields: [tenantId], references: [id])
  tenantId    String

  @@index([projectId, version])
  @@index([projectId, isActive])
  @@map("content_versions")
}

// =============================================================================
// SPRINT 3.2 - SELL MODULE MODELS
// =============================================================================

model SalesOpportunity {
  id                String                    @id @default(cuid())
  title             String
  description       String?                   @db.Text
  amount            Decimal                   @db.Decimal(15,2)
  currency          String                    @default("EUR")
  probability       Int                       // 0-100%
  stage             SalesStage                @default(PROSPECTING)
  source            String?                   // website, referral, cold_call, social_media, etc.
  priority          SalesPriority             @default(MEDIUM)
  expectedCloseDate DateTime?
  actualCloseDate   DateTime?
  closedReason      String?                   @db.Text
  tags              String[]                  // Opportunity tags
  customFields      Json?                     // Custom fields data
  notes             String?                   @db.Text
  customerId        String?
  assignedTo        String
  tenantId          String
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
  
  // Relations
  tenant            Tenant                    @relation(fields: [tenantId], references: [id])
  customer          Customer?                 @relation(fields: [customerId], references: [id])
  assignee          User                      @relation("SalesOpportunityAssignee", fields: [assignedTo], references: [id])
  quotes            SalesQuote[]
  activities        SalesActivity[]
  products          SalesOpportunityProduct[]

  @@index([tenantId, stage])
  @@index([assignedTo, stage])
  @@index([expectedCloseDate])
  @@index([amount, stage])
  @@map("sales_opportunities")
}

model SalesQuote {
  id              String            @id @default(cuid())
  quoteNumber     String            @unique
  opportunityId   String
  title           String
  description     String?           @db.Text
  subtotal        Decimal           @db.Decimal(15,2)
  taxAmount       Decimal           @db.Decimal(15,2) @default(0)
  discountAmount  Decimal           @db.Decimal(15,2) @default(0)
  discountPercent Float?            // Discount percentage if applicable
  totalAmount     Decimal           @db.Decimal(15,2)
  currency        String            @default("EUR")
  status          SalesQuoteStatus  @default(DRAFT)
  validUntil      DateTime
  terms           String?           @db.Text
  notes           String?           @db.Text
  templateId      String?           // Quote template used
  customerMessage String?           @db.Text // Message to customer
  internalNotes   String?           @db.Text // Internal team notes
  sentAt          DateTime?         // When quote was sent
  viewedAt        DateTime?         // When customer viewed quote
  acceptedAt      DateTime?         // When customer accepted
  rejectedAt      DateTime?         // When customer rejected
  expiresAt       DateTime?         // Auto-expiry date
  tenantId        String
  createdBy       String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  // Relations
  tenant          Tenant            @relation(fields: [tenantId], references: [id])
  opportunity     SalesOpportunity  @relation(fields: [opportunityId], references: [id])
  creator         User              @relation("SalesQuoteCreator", fields: [createdBy], references: [id])
  items           SalesQuoteItem[]

  @@index([tenantId, status])
  @@index([opportunityId])
  @@index([quoteNumber])
  @@index([validUntil, status])
  @@map("sales_quotes")
}

model SalesQuoteItem {
  id          String  @id @default(cuid())
  quoteId     String
  productId   String?
  name        String
  description String? @db.Text
  quantity    Decimal @db.Decimal(10,2)
  unitPrice   Decimal @db.Decimal(15,2)
  discount    Decimal @db.Decimal(15,2) @default(0)
  totalPrice  Decimal @db.Decimal(15,2)
  sortOrder   Int     @default(0) // For item ordering
  isOptional  Boolean @default(false) // Optional add-on items
  tenantId    String
  
  // Relations
  quote       SalesQuote @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  product     Product?   @relation(fields: [productId], references: [id])
  tenant      Tenant     @relation(fields: [tenantId], references: [id])

  @@index([quoteId, sortOrder])
  @@map("sales_quote_items")
}

model Product {
  id              String                     @id @default(cuid())
  name            String
  description     String?                    @db.Text
  sku             String?                    @unique
  category        String?
  subcategory     String?
  price           Decimal                    @db.Decimal(15,2)
  cost            Decimal?                   @db.Decimal(15,2) // Cost basis for margin calculation
  currency        String                     @default("EUR")
  unit            String?                    // kg, piece, hour, etc.
  weight          Float?                     // In kg
  dimensions      Json?                      // length, width, height
  imageUrl        String?                    // Product image
  isService       Boolean                    @default(false)   // Product vs Service
  isRecurring     Boolean                    @default(false)   // Recurring billing
  billingCycle    String?                    // monthly, yearly, etc.
  isActive        Boolean                    @default(true)
  taxRate         Float?                     // Tax rate for this product
  minQuantity     Int?                       @default(1)       // Minimum order quantity
  maxQuantity     Int?                       // Maximum order quantity
  stockLevel      Int?                       // Current stock level
  reorderLevel    Int?                       // Reorder point
  tags            String[]                   // Product tags
  customFields    Json?                      // Custom product fields
  tenantId        String
  createdAt       DateTime                   @default(now())
  updatedAt       DateTime                   @updatedAt
  
  // Relations
  tenant              Tenant                     @relation(fields: [tenantId], references: [id])
  quoteItems          SalesQuoteItem[]
  opportunityProducts SalesOpportunityProduct[]

  @@index([tenantId, isActive])
  @@index([category, isActive])
  @@index([sku])
  @@map("products")
}

model SalesOpportunityProduct {
  id              String           @id @default(cuid())
  opportunityId   String
  productId       String
  quantity        Decimal          @db.Decimal(10,2)
  unitPrice       Decimal          @db.Decimal(15,2)
  discount        Decimal          @db.Decimal(15,2) @default(0)
  totalPrice      Decimal          @db.Decimal(15,2)
  notes           String?          @db.Text
  tenantId        String
  
  // Relations
  opportunity     SalesOpportunity @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  product         Product          @relation(fields: [productId], references: [id])
  tenant          Tenant           @relation(fields: [tenantId], references: [id])

  @@index([opportunityId])
  @@index([productId])
  @@map("sales_opportunity_products")
}

model SalesActivity {
  id              String             @id @default(cuid())
  opportunityId   String?
  customerId      String?
  type            SalesActivityType
  subject         String
  description     String?            @db.Text
  status          ActivityStatus     @default(PLANNED)
  scheduledAt     DateTime?
  completedAt     DateTime?
  duration        Int?               // minutes
  location        String?            // meeting location or call details
  outcome         String?            @db.Text
  nextAction      String?            @db.Text
  priority        SalesPriority      @default(MEDIUM)
  reminderAt      DateTime?          // Reminder time
  isRecurring     Boolean            @default(false)
  recurringType   String?            // daily, weekly, monthly
  recurringUntil  DateTime?
  attendees       String[]           // Email addresses of attendees
  attachments     String[]           // File URLs
  tenantId        String
  createdBy       String
  assignedTo      String?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  
  // Relations
  tenant          Tenant             @relation(fields: [tenantId], references: [id])
  opportunity     SalesOpportunity?  @relation(fields: [opportunityId], references: [id])
  customer        Customer?          @relation(fields: [customerId], references: [id])
  creator         User               @relation("SalesActivityCreator", fields: [createdBy], references: [id])
  assignee        User?              @relation("AssignedSalesActivities", fields: [assignedTo], references: [id])

  @@index([tenantId, status])
  @@index([assignedTo, status])
  @@index([opportunityId])
  @@index([scheduledAt, status])
  @@map("sales_activities")
}

model SalesTarget {
  id          String       @id @default(cuid())
  userId      String
  period      TargetPeriod // monthly, quarterly, yearly
  year        Int
  month       Int?         // 1-12 for monthly targets
  quarter     Int?         // 1-4 for quarterly targets
  target      Decimal      @db.Decimal(15,2)
  achieved    Decimal      @db.Decimal(15,2) @default(0)
  currency    String       @default("EUR")
  targetType  String       @default("REVENUE") // REVENUE, DEALS, ACTIVITIES
  description String?      @db.Text
  tenantId    String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  // Relations
  tenant      Tenant       @relation(fields: [tenantId], references: [id])
  user        User         @relation("SalesTargetUser", fields: [userId], references: [id])

  @@unique([userId, period, year, month, quarter, targetType])
  @@index([tenantId, period, year])
  @@index([userId, period])
  @@map("sales_targets")
}

// =============================================================================
// SPRINT 3.2 - ENUMS FOR CREATE & SELL MODULES
// =============================================================================

enum ContentStatus {
  DRAFT
  IN_PROGRESS
  REVIEW
  APPROVED
  COMPLETED
  PUBLISHED
  ARCHIVED
}

enum SalesStage {
  PROSPECTING
  QUALIFICATION
  NEEDS_ANALYSIS
  PROPOSAL
  NEGOTIATION
  CLOSED_WON
  CLOSED_LOST
}

enum SalesPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum SalesQuoteStatus {
  DRAFT
  SENT
  VIEWED
  ACCEPTED
  REJECTED
  EXPIRED
  CANCELLED
}

enum SalesActivityType {
  CALL
  EMAIL
  MEETING
  DEMO
  PROPOSAL
  FOLLOW_UP
  PRESENTATION
  SITE_VISIT
  NEGOTIATION
  CONTRACT_REVIEW
  OTHER
}

enum ActivityStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  POSTPONED
}

enum TargetPeriod {
  MONTHLY
  QUARTERLY
  YEARLY
}
